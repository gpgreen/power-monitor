
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000052c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  000005c0  2**0
                  ALLOC
  3 .stab         00001350  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e37  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000332e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_16>
  44:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_21>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	21 02       	muls	r18, r17
  6a:	28 02       	muls	r18, r24
  6c:	36 02       	muls	r19, r22
  6e:	46 02       	muls	r20, r22
  70:	57 02       	muls	r21, r23
  72:	5f 02       	muls	r21, r31
  74:	68 02       	muls	r22, r24

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a9 31       	cpi	r26, 0x19	; 25
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  96:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <init>:

void
init(void)
{
    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
  9e:	53 98       	cbi	0x0a, 3	; 10

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
  a0:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
  a2:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
  a4:	26 9a       	sbi	0x04, 6	; 4
    
    // PORTD setup PINS for output
    DDRD |= (_BV(LED2)|_BV(LED3)|_BV(LED4));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6e       	ori	r24, 0xE0	; 224
  aa:	8a b9       	out	0x0a, r24	; 10

    // PORTB setup PINS for output
    DDRB |= (_BV(LED1)|_BV(LED5)|_BV(LED6));
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	83 68       	ori	r24, 0x83	; 131
  b0:	84 b9       	out	0x04, r24	; 4
    
    // enable is set low
    ENABLE_SET_OFF;
  b2:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown is set high
    SHUTDOWN_SET_ON;
  b4:	2e 9a       	sbi	0x05, 6	; 5
    
    // timer set to CK/8, overflow interrupt enabled
    TCCR0B = _BV(CS01);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  c0:	08 95       	ret

000000c2 <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
    button_mask <<= 1;
  ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
  d2:	88 0f       	add	r24, r24
  d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    if (BUTTON_ON)
  d8:	4a 9b       	sbis	0x09, 2	; 9
  da:	04 c0       	rjmp	.+8      	; 0xe4 <__vector_16+0x22>
        button_mask |= 1;
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_16+0x28>
    else
        button_mask &= ~1;
  e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    if (button_state == 1)
  ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <button_state>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	29 f4       	brne	.+10     	; 0x100 <__vector_16+0x3e>
        tovflows++;
  f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tovflows>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tovflows>

    TOGGLE_LED6;
 100:	29 9b       	sbis	0x05, 1	; 5
 102:	02 c0       	rjmp	.+4      	; 0x108 <__vector_16+0x46>
 104:	29 98       	cbi	0x05, 1	; 5
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_16+0x48>
 108:	29 9a       	sbi	0x05, 1	; 5
}
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
    // does nothing but wake up the cpu
}
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <sensor_init>:
void
sensor_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    DDRB &= ~(_BV(MOSI)|_BV(SCK)|_BV(CS));
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	83 7d       	andi	r24, 0xD3	; 211
 12e:	84 b9       	out	0x04, r24	; 4

    // set pullups on input pins
    PORTB |= (_BV(MOSI)|_BV(SCK)|_BV(CS));
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8c 62       	ori	r24, 0x2C	; 44
 134:	85 b9       	out	0x05, r24	; 5

    // PORTB setup PINS for output
    DDRB |= _BV(MISO);
 136:	24 9a       	sbi	0x04, 4	; 4

    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 138:	87 b1       	in	r24, 0x07	; 7
 13a:	80 7c       	andi	r24, 0xC0	; 192
 13c:	87 b9       	out	0x07, r24	; 7
    
    // start the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 13e:	8b e8       	ldi	r24, 0x8B	; 139
 140:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    // at start, no channels are in use
    adc_channels = 0;           /* the channels enabled mask */
 144:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_channels>
    current_channel = -1;       /* channel currently measured */
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <current_channel+0x1>
 150:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <current_channel>
    adc_finished = 0;
 154:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_finished>

    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	8c bd       	out	0x2c, r24	; 44
 15c:	08 95       	ret

0000015e <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 15e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= (_BV(PRADC)|_BV(PRSPI));
 162:	e4 e6       	ldi	r30, 0x64	; 100
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	85 60       	ori	r24, 0x05	; 5
 16a:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    DDRB &= ~(_BV(MISO));
 16c:	24 98       	cbi	0x04, 4	; 4
    PORTB |= _BV(MISO);
 16e:	2c 9a       	sbi	0x05, 4	; 5

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 170:	88 b1       	in	r24, 0x08	; 8
 172:	8f 63       	ori	r24, 0x3F	; 63
 174:	88 b9       	out	0x08, r24	; 8
 176:	08 95       	ret

00000178 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // startup adc
    PRR &= ~(_BV(PRADC));
 178:	e4 e6       	ldi	r30, 0x64	; 100
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	80 83       	st	Z, r24
    // initialize the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 182:	8b e8       	ldi	r24, 0x8B	; 139
 184:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	9f ef       	ldi	r25, 0xFF	; 255
 18c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <current_channel+0x1>
 190:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <current_channel>
    adc_finished = 0;
 194:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_finished>
    
    // MISO to output, pull-up off
    PORTB &= ~(_BV(MISO));
 198:	2c 98       	cbi	0x05, 4	; 5
    DDRB |= _BV(MISO);
 19a:	24 9a       	sbi	0x04, 4	; 4

    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	80 7c       	andi	r24, 0xC0	; 192
 1a0:	88 b9       	out	0x08, r24	; 8

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 1a2:	80 81       	ld	r24, Z
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	8c bd       	out	0x2c, r24	; 44
 1ac:	08 95       	ret

000001ae <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 1ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_channels>
    if (curchannels > 0 && current_channel < 0)
 1b2:	88 23       	and	r24, r24
 1b4:	41 f1       	breq	.+80     	; 0x206 <sensor_state_machine+0x58>
 1b6:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <current_channel>
 1ba:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <current_channel+0x1>
 1be:	37 ff       	sbrs	r19, 7
 1c0:	22 c0       	rjmp	.+68     	; 0x206 <sensor_state_machine+0x58>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & (1<<i))
 1c6:	48 2f       	mov	r20, r24
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	ba 01       	movw	r22, r20
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <sensor_state_machine+0x26>
 1d0:	75 95       	asr	r23
 1d2:	67 95       	ror	r22
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <sensor_state_machine+0x22>
 1d8:	60 ff       	sbrs	r22, 0
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <sensor_state_machine+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1dc:	f8 94       	cli
            {
                ATOMIC_BLOCK(ATOMIC_FORCEON) {
                    current_channel = i;
 1de:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <current_channel>
 1e2:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <current_channel+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 1e6:	78 94       	sei
                }
                break;
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <sensor_state_machine+0x46>
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
    if (curchannels > 0 && current_channel < 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 1ee:	26 30       	cpi	r18, 0x06	; 6
 1f0:	31 05       	cpc	r19, r1
 1f2:	59 f7       	brne	.-42     	; 0x1ca <sensor_state_machine+0x1c>
                    current_channel = i;
                }
                break;
            }
        }
        ADMUX = current_channel;
 1f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_channel>
 1f8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

        // start a new conversion
        ADCSRA |= _BV(ADSC);
 1fc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 200:	90 64       	ori	r25, 0x40	; 64
 202:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 206:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_finished>
 20a:	99 23       	and	r25, r25
 20c:	d1 f1       	breq	.+116    	; 0x282 <sensor_state_machine+0xd4>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 20e:	81 11       	cpse	r24, r1
 210:	09 c0       	rjmp	.+18     	; 0x224 <sensor_state_machine+0x76>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 212:	f8 94       	cli
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                current_channel = -1;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <current_channel+0x1>
 21c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 220:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 222:	2c c0       	rjmp	.+88     	; 0x27c <sensor_state_machine+0xce>
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
 224:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <current_channel>
 228:	2f 5f       	subi	r18, 0xFF	; 255
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & (1<<i)) {
 22a:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 22c:	26 30       	cpi	r18, 0x06	; 6
 22e:	20 f5       	brcc	.+72     	; 0x278 <sensor_state_machine+0xca>
            {
                if (curchannels & (1<<i)) {
 230:	42 2f       	mov	r20, r18
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	bc 01       	movw	r22, r24
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <sensor_state_machine+0x90>
 23a:	75 95       	asr	r23
 23c:	67 95       	ror	r22
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <sensor_state_machine+0x8c>
 242:	60 ff       	sbrs	r22, 0
 244:	10 c0       	rjmp	.+32     	; 0x266 <sensor_state_machine+0xb8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 246:	f8 94       	cli
                    ATOMIC_BLOCK(ATOMIC_FORCEON) {
                        current_channel = i;
 248:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <current_channel+0x1>
 24c:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 250:	78 94       	sei
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion
            ADMUX = current_channel;
 252:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <current_channel>
 256:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
            ADCSRA |= _BV(ADSC);
 25a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 264:	0b c0       	rjmp	.+22     	; 0x27c <sensor_state_machine+0xce>
                        current_channel = i;
                    }
                    break;
                } else
                    // zero out channels not used
                    adc_values[i] = 0;
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	fa 01       	movw	r30, r20
 26c:	e3 5f       	subi	r30, 0xF3	; 243
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	11 82       	std	Z+1, r1	; 0x01
 272:	10 82       	st	Z, r1
                ++i;
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	da cf       	rjmp	.-76     	; 0x22c <sensor_state_machine+0x7e>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	da cf       	rjmp	.-76     	; 0x230 <sensor_state_machine+0x82>
            }
            // start new conversion
            ADMUX = current_channel;
            ADCSRA |= _BV(ADSC);
        }
        adc_finished = 0;
 27c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_finished>
 280:	08 95       	ret
 282:	ed e0       	ldi	r30, 0x0D	; 13
 284:	f1 e0       	ldi	r31, 0x01	; 1
        // start a new conversion
        ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
        }
        adc_finished = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & (1 << i)) != (1 << i))
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ab 01       	movw	r20, r22
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <sensor_state_machine+0xec>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <sensor_state_machine+0xe8>
 29e:	dc 01       	movw	r26, r24
 2a0:	a4 23       	and	r26, r20
 2a2:	b5 23       	and	r27, r21
 2a4:	4a 17       	cp	r20, r26
 2a6:	5b 07       	cpc	r21, r27
 2a8:	11 f0       	breq	.+4      	; 0x2ae <sensor_state_machine+0x100>
                adc_values[i] = 0;
 2aa:	11 82       	std	Z+1, r1	; 0x01
 2ac:	10 82       	st	Z, r1
            ADCSRA |= _BV(ADSC);
        }
        adc_finished = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	32 96       	adiw	r30, 0x02	; 2
 2b4:	26 30       	cpi	r18, 0x06	; 6
 2b6:	31 05       	cpc	r19, r1
 2b8:	59 f7       	brne	.-42     	; 0x290 <sensor_state_machine+0xe2>
 2ba:	08 95       	ret

000002bc <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
    uint8_t low, high;
    low = ADCL;
 2d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    high = ADCH;
 2d4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 2d8:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <current_channel>
 2dc:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <current_channel+0x1>
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	e3 5f       	subi	r30, 0xF3	; 243
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	92 2b       	or	r25, r18
 2ec:	91 83       	std	Z+1, r25	; 0x01
 2ee:	80 83       	st	Z, r24
    adc_finished = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adc_finished>
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_17>:
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	ee b5       	in	r30, 0x2e	; 46
 31e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <spi_state.1684>
 322:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <spi_state.1684+0x1>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	91 05       	cpc	r25, r1
 32a:	49 f1       	breq	.+82     	; 0x37e <__vector_17+0x74>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	91 05       	cpc	r25, r1
 330:	b1 f1       	breq	.+108    	; 0x39e <__vector_17+0x94>
 332:	89 2b       	or	r24, r25
 334:	c9 f5       	brne	.+114    	; 0x3a8 <__vector_17+0x9e>
 336:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <addr.1683>
 33a:	80 ef       	ldi	r24, 0xF0	; 240
 33c:	8e 0f       	add	r24, r30
 33e:	86 30       	cpi	r24, 0x06	; 6
 340:	90 f4       	brcc	.+36     	; 0x366 <__vector_17+0x5c>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	e3 51       	subi	r30, 0x13	; 19
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	80 81       	ld	r24, Z
 34e:	8e bd       	out	0x2e, r24	; 46
 350:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <addr.1683>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e3 51       	subi	r30, 0x13	; 19
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	81 81       	ldd	r24, Z+1	; 0x01
 360:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 364:	09 c0       	rjmp	.+18     	; 0x378 <__vector_17+0x6e>
 366:	e2 30       	cpi	r30, 0x02	; 2
 368:	21 f4       	brne	.+8      	; 0x372 <__vector_17+0x68>
 36a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_channels>
 36e:	8e bd       	out	0x2e, r24	; 46
 370:	01 c0       	rjmp	.+2      	; 0x374 <__vector_17+0x6a>
 372:	1e bc       	out	0x2e, r1	; 46
 374:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0b c0       	rjmp	.+22     	; 0x394 <__vector_17+0x8a>
 37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 382:	8e bd       	out	0x2e, r24	; 46
 384:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <addr.1683>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	11 f4       	brne	.+4      	; 0x390 <__vector_17+0x86>
 38c:	e0 93 09 01 	sts	0x0109, r30	; 0x800109 <adc_channels>
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <spi_state.1684+0x1>
 398:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <spi_state.1684>
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <__vector_17+0x9e>
 39e:	1e bc       	out	0x2e, r1	; 46
 3a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spi_state.1684+0x1>
 3a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <spi_state.1684>
 3a8:	28 9b       	sbis	0x05, 0	; 5
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <__vector_17+0xa6>
 3ac:	28 98       	cbi	0x05, 0	; 5
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <__vector_17+0xa8>
 3b0:	28 9a       	sbi	0x05, 0	; 5
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <main>:
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
 3c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 3c8:	8a 6c       	ori	r24, 0xCA	; 202
 3ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    
    init();
 3ce:	0e 94 4f 00 	call	0x9e	; 0x9e <init>
    sensor_init();
 3d2:	0e 94 95 00 	call	0x12a	; 0x12a <sensor_init>
    
    machine_state = Start;
 3d6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <machine_state>
    button_mask = 0xFF;
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    
	// start interrupts
	sei();
 3e0:	78 94       	sei
    // main loop
    while(1)
    {
        // check if button down, mask length is 2.048ms
        if (button_state == 0 && button_mask == 0x00) {
            button_state = 1;
 3e2:	c1 e0       	ldi	r28, 0x01	; 1
            LED4_SET_OFF;

            ENABLE_SET_OFF;
            SHUTDOWN_SET_ON;

            machine_state = LowPowerMode;
 3e4:	16 e0       	ldi	r17, 0x06	; 6

            if (button_pressed())
                machine_state = SignaledOff;
            // if turned off via the desktop
            if (!mcu_is_running())
                machine_state = MCUOff;
 3e6:	d5 e0       	ldi	r29, 0x05	; 5
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED4_SET_OFF;

            if (button_pressed())
                machine_state = SignaledOff;
 3e8:	04 e0       	ldi	r16, 0x04	; 4
            LED4_SET_OFF;

            ENABLE_SET_ON;

            if (mcu_is_running())
                machine_state = MCURunning;
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	f8 2e       	mov	r15, r24
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;

            if (button_pressed())
                machine_state = SignaledOn;
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	e9 2e       	mov	r14, r25

    // main loop
    while(1)
    {
        // check if button down, mask length is 2.048ms
        if (button_state == 0 && button_mask == 0x00) {
 3f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <button_state>
 3f6:	81 11       	cpse	r24, r1
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
 3fe:	81 11       	cpse	r24, r1
 400:	13 c0       	rjmp	.+38     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
            button_state = 1;
 402:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <button_state>
            tovflows = 0;
 406:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tovflows>
 40a:	0e c0       	rjmp	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
            // has it been down for long enough
        } else if (button_state == 1) {
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	61 f4       	brne	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
            if (button_mask == 0x0FF) {
 410:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <button_mask>
 414:	9f 3f       	cpi	r25, 0xFF	; 255
 416:	41 f4       	brne	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                // delay long enough, each overflow = 256us, this is 25.6ms
                if (tovflows >= F_CPU / 8 / 256 / 100) {
 418:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tovflows>
 41c:	97 32       	cpi	r25, 0x27	; 39
 41e:	10 f0       	brcs	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
                    buttonpress = 1;
 420:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buttonpress>
                }
                button_state = 0;
 424:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <button_state>
            }
        }
        
        switch (machine_state) {
 428:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <machine_state>
 42c:	8e 2f       	mov	r24, r30
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	87 30       	cpi	r24, 0x07	; 7
 432:	91 05       	cpc	r25, r1
 434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	6d c0       	rjmp	.+218    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 438:	fc 01       	movw	r30, r24
 43a:	ec 5c       	subi	r30, 0xCC	; 204
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__tablejump2__>
        case Start:
            LED1_SET_OFF;
 442:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 444:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 446:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 448:	5f 98       	cbi	0x0b, 7	; 11

            ENABLE_SET_OFF;
 44a:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_ON;
 44c:	2e 9a       	sbi	0x05, 6	; 5
 44e:	5e c0       	rjmp	.+188    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>

            machine_state = WaitSignalOn;
            break;
        case WaitSignalOn:
            LED1_SET_ON;
 450:	2f 9a       	sbi	0x05, 7	; 5
            LED2_SET_OFF;
 452:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 454:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 456:	5f 98       	cbi	0x0b, 7	; 11
}

inline
int button_pressed(void)
{
    if (buttonpress) {
 458:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 45c:	88 23       	and	r24, r24
 45e:	09 f4       	brne	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	5a c0       	rjmp	.+180    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        buttonpress = 0;
 462:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;

            if (button_pressed())
                machine_state = SignaledOn;
 466:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <machine_state>
 46a:	55 c0       	rjmp	.+170    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
            break;
        case SignaledOn:
            LED2_SET_ON;
 46c:	5d 9a       	sbi	0x0b, 5	; 11
            LED1_SET_OFF;
 46e:	2f 98       	cbi	0x05, 7	; 5
            LED3_SET_OFF;
 470:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 472:	5f 98       	cbi	0x0b, 7	; 11

            ENABLE_SET_ON;
 474:	5c 9a       	sbi	0x0b, 4	; 11

            if (mcu_is_running())
 476:	4b 99       	sbic	0x09, 3	; 9
                machine_state = MCURunning;
 478:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <machine_state>
}

inline
int button_pressed(void)
{
    if (buttonpress) {
 47c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 480:	88 23       	and	r24, r24
 482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	48 c0       	rjmp	.+144    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        buttonpress = 0;
 486:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
                machine_state = MCURunning;
            if (button_pressed())
                machine_state = MCUOff;
            break;
        case MCURunning:
            LED3_SET_ON;
 48c:	5e 9a       	sbi	0x0b, 6	; 11
            LED1_SET_OFF;
 48e:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 490:	5d 98       	cbi	0x0b, 5	; 11
            LED4_SET_OFF;
 492:	5f 98       	cbi	0x0b, 7	; 11
}

inline
int button_pressed(void)
{
    if (buttonpress) {
 494:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 498:	88 23       	and	r24, r24
 49a:	21 f0       	breq	.+8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
        buttonpress = 0;
 49c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED4_SET_OFF;

            if (button_pressed())
                machine_state = SignaledOff;
 4a0:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <machine_state>
            // if turned off via the desktop
            if (!mcu_is_running())
 4a4:	4b 99       	sbic	0x09, 3	; 9
 4a6:	37 c0       	rjmp	.+110    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
                machine_state = MCUOff;
 4a8:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <machine_state>
 4ac:	34 c0       	rjmp	.+104    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
            break;
        case SignaledOff:
            LED4_SET_ON;
 4ae:	5f 9a       	sbi	0x0b, 7	; 11
            LED1_SET_OFF;
 4b0:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 4b2:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 4b4:	5e 98       	cbi	0x0b, 6	; 11

            SHUTDOWN_SET_OFF;
 4b6:	2e 98       	cbi	0x05, 6	; 5

            if (!mcu_is_running())
 4b8:	4b 9b       	sbis	0x09, 3	; 9
 4ba:	f6 cf       	rjmp	.-20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4bc:	2c c0       	rjmp	.+88     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
                machine_state = MCUOff;
            break;
        case MCUOff:
            LED1_SET_OFF;
 4be:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 4c0:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 4c2:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 4c4:	5f 98       	cbi	0x0b, 7	; 11

            ENABLE_SET_OFF;
 4c6:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_ON;
 4c8:	2e 9a       	sbi	0x05, 6	; 5

            machine_state = LowPowerMode;
 4ca:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <machine_state>
            break;
 4ce:	23 c0       	rjmp	.+70     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        case LowPowerMode:
            LED1_SET_OFF;
 4d0:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 4d2:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 4d4:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 4d6:	5f 98       	cbi	0x0b, 7	; 11
            LED5_SET_OFF;
 4d8:	28 98       	cbi	0x05, 0	; 5
            LED6_SET_OFF;
 4da:	29 98       	cbi	0x05, 1	; 5

            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 4dc:	83 b7       	in	r24, 0x33	; 51
 4de:	81 7f       	andi	r24, 0xF1	; 241
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	83 bf       	out	0x33, r24	; 51
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 4e4:	e8 9a       	sbi	0x1d, 0	; 29
            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 4e6:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 4e8:	2e 9a       	sbi	0x05, 6	; 5
            
            sensor_pre_power_down();
 4ea:	0e 94 af 00 	call	0x15e	; 0x15e <sensor_pre_power_down>
            sleep_enable();
 4ee:	83 b7       	in	r24, 0x33	; 51
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 4f4:	83 b7       	in	r24, 0x33	; 51
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	83 bf       	out	0x33, r24	; 51
 4fa:	88 95       	sleep
 4fc:	83 b7       	in	r24, 0x33	; 51
 4fe:	8e 7f       	andi	r24, 0xFE	; 254
 500:	83 bf       	out	0x33, r24	; 51

            // woken up
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 502:	e8 98       	cbi	0x1d, 0	; 29
            sensor_post_power_down();
 504:	0e 94 bc 00 	call	0x178	; 0x178 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 508:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 50a:	26 9a       	sbi	0x04, 6	; 4
            
            machine_state = WaitSignalOn;
 50c:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <machine_state>
            break;
 510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        default:
            machine_state = Start;
 512:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <machine_state>
        }

        sensor_state_machine();
 516:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sensor_state_machine>
    }
 51a:	6b cf       	rjmp	.-298    	; 0x3f2 <main+0x2e>

0000051c <__tablejump2__>:
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	05 90       	lpm	r0, Z+
 522:	f4 91       	lpm	r31, Z
 524:	e0 2d       	mov	r30, r0
 526:	09 94       	ijmp

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
