
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800102  00800102  0000073e  2**0
                  ALLOC
  3 .noinit       00000001  00800121  00800121  0000073e  2**0
                  ALLOC
  4 .stab         00001950  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000010a7  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003137  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003148  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00003d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_1>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_16>
  44:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_17>
  48:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  4c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  54:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_21>
  58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  60:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  68:	ae 00       	.word	0x00ae	; ????
  6a:	ac 00       	.word	0x00ac	; ????
  6c:	ae 00       	.word	0x00ae	; ????
  6e:	ae 00       	.word	0x00ae	; ????
  70:	ae 00       	.word	0x00ae	; ????
  72:	ac 00       	.word	0x00ac	; ????
  74:	ae 00       	.word	0x00ae	; ????
  76:	ac 00       	.word	0x00ac	; ????
  78:	ae 00       	.word	0x00ae	; ????
  7a:	ac 00       	.word	0x00ac	; ????
  7c:	ae 00       	.word	0x00ae	; ????
  7e:	ac 00       	.word	0x00ac	; ????
  80:	ac 00       	.word	0x00ac	; ????
  82:	ac 00       	.word	0x00ac	; ????
  84:	ae 00       	.word	0x00ae	; ????
  86:	36 03       	mulsu	r19, r22
  88:	72 02       	muls	r23, r18
  8a:	76 02       	muls	r23, r22
  8c:	83 02       	muls	r24, r19
  8e:	87 02       	muls	r24, r23
  90:	ac 02       	muls	r26, r28
  92:	b1 02       	muls	r27, r17
  94:	bc 02       	muls	r27, r28
  96:	c0 02       	muls	r28, r16
  98:	d6 02       	muls	r29, r22
  9a:	fc 02       	muls	r31, r28
  9c:	07 03       	mulsu	r16, r23
  9e:	0b 03       	fmul	r16, r19
  a0:	10 03       	mulsu	r17, r16
  a2:	10 03       	mulsu	r17, r16
  a4:	13 03       	mulsu	r17, r19
  a6:	2f 03       	fmul	r18, r23

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <get_mcusr>:
  b4:	84 b7       	in	r24, 0x34	; 52
  b6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__bss_end>
  ba:	14 be       	out	0x34, r1	; 52
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	a8 95       	wdr
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	0f be       	out	0x3f, r0	; 63

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	e8 ea       	ldi	r30, 0xA8	; 168
  da:	f6 e0       	ldi	r31, 0x06	; 6
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a2 e0       	ldi	r26, 0x02	; 2
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a1 32       	cpi	r26, 0x21	; 33
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
  f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  fc:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

00000100 <__bad_interrupt>:
 100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <init>:

void
init(void)
{
    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
 104:	e4 e6       	ldi	r30, 0x64	; 100
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8a 6c       	ori	r24, 0xCA	; 202
 10c:	80 83       	st	Z, r24
    
    // timer set to CK/256, overflow interrupt enabled
    TCCR0B = _BV(CS02);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
 118:	21 98       	cbi	0x04, 1	; 4

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
 11a:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
 11c:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
 11e:	26 9a       	sbi	0x04, 6	; 4

    // LED
    LED1_DIR |= _BV(LED1);
 120:	20 9a       	sbi	0x04, 0	; 4
    LED1_SET_OFF;
 122:	28 98       	cbi	0x05, 0	; 5
    // unused pins input, pull-up on
    DDRD &= ~(_BV(3));
    PORTD |= _BV(3);
#else
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1)|_BV(3)|_BV(5)|_BV(6)|_BV(7));
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	84 71       	andi	r24, 0x14	; 20
 128:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (_BV(0)|_BV(1)|_BV(3)|_BV(5)|_BV(6)|_BV(7));
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8b 6e       	ori	r24, 0xEB	; 235
 12e:	8b b9       	out	0x0b, r24	; 11
#endif
    
    // enable inactive is low
    ENABLE_SET_OFF;
 130:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown inactive is low
    SHUTDOWN_SET_OFF;
 132:	2e 98       	cbi	0x05, 6	; 5

    // the other components
    sensor_init();
 134:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sensor_init>
    spi_init();
 138:	0c 94 b2 01 	jmp	0x364	; 0x364 <spi_init>

0000013c <change_state>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 13c:	f8 94       	cli
// change state
void
change_state(StateMachine new_state)
{
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        switch (machine_state) {
 13e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <machine_state>
 142:	49 2f       	mov	r20, r25
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	fa 01       	movw	r30, r20
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	ef 30       	cpi	r30, 0x0F	; 15
 14c:	f1 05       	cpc	r31, r1
 14e:	20 f4       	brcc	.+8      	; 0x158 <change_state+0x1c>
 150:	ec 5c       	subi	r30, 0xCC	; 204
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	0c 94 4c 03 	jmp	0x698	; 0x698 <__tablejump2__>
        case PowerDownEntry:
        case ButtonPress:
        case ButtonRelease:
            break;
        default:
            prev_state = machine_state;
 158:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <prev_state>
        }
        machine_state = new_state;
 15c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <machine_state>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 160:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 162:	08 95       	ret

00000164 <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
    button_mask <<= 1;
 170:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 174:	88 0f       	add	r24, r24
 176:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (BUTTON_ON)
 17a:	4a 9b       	sbis	0x09, 2	; 9
 17c:	04 c0       	rjmp	.+8      	; 0x186 <__vector_16+0x22>
        button_mask |= 1;
 17e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 182:	81 60       	ori	r24, 0x01	; 1
 184:	03 c0       	rjmp	.+6      	; 0x18c <__vector_16+0x28>
    else
        button_mask &= ~1;
 186:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (button_timer >= 0)
 190:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 194:	87 fd       	sbrc	r24, 7
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <__vector_16+0x3e>
        button_timer++;
 198:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    if (wakeup_timer >= 0)
 1a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 1a6:	87 fd       	sbrc	r24, 7
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_16+0x50>
        wakeup_timer++;
 1aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    if (idle_timer >= 0)
 1b4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1b8:	87 fd       	sbrc	r24, 7
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__vector_16+0x62>
        idle_timer++;
 1bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
#ifdef USE_LED
    TOGGLE_LED6;
#endif
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
    int0_event = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <int0_event>
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <sensor_init>:

void
sensor_init(void)
{
    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	80 7c       	andi	r24, 0xC0	; 192
 1f4:	87 b9       	out	0x07, r24	; 7

    // turn off analog comparator and digital input buffer
    ACSR |= _BV(ACD);
 1f6:	80 b7       	in	r24, 0x30	; 48
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 bf       	out	0x30, r24	; 48
    DIDR1 |= _BV(AIN1D)|_BV(AIN0D);
 1fc:	ef e7       	ldi	r30, 0x7F	; 127
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	83 60       	ori	r24, 0x03	; 3
 204:	80 83       	st	Z, r24

    // turn off digital input buffers
    DIDR0 |= _BV(ADC0D)|_BV(ADC1D)|_BV(ADC2D)|_BV(ADC3D)|_BV(ADC4D)|_BV(ADC5D);
 206:	ee e7       	ldi	r30, 0x7E	; 126
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8f 63       	ori	r24, 0x3F	; 63
 20e:	80 83       	st	Z, r24

    // init ADC
    ADCSRA = k_adc_status_reg;
 210:	8d e8       	ldi	r24, 0x8D	; 141
 212:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // at start, no channels are in use
    current_channel = -1;       /* channel currently measured */
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
 21c:	08 95       	ret

0000021e <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 21e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= _BV(PRADC);
 222:	e4 e6       	ldi	r30, 0x64	; 100
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 22c:	88 b1       	in	r24, 0x08	; 8
 22e:	8f 63       	ori	r24, 0x3F	; 63
 230:	88 b9       	out	0x08, r24	; 8
 232:	08 95       	ret

00000234 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 234:	88 b1       	in	r24, 0x08	; 8
 236:	80 7c       	andi	r24, 0xC0	; 192
 238:	88 b9       	out	0x08, r24	; 8

    // startup adc
    PRR &= ~(_BV(PRADC));
 23a:	e4 e6       	ldi	r30, 0x64	; 100
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	80 83       	st	Z, r24

    // init ADC
    ADCSRA = k_adc_status_reg;
 244:	8d e8       	ldi	r24, 0x8D	; 141
 246:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
 250:	08 95       	ret

00000252 <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 252:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <adc_channels>

    if (current_channel < 0 && curchannels > 0)
 256:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 25a:	87 ff       	sbrs	r24, 7
 25c:	1b c0       	rjmp	.+54     	; 0x294 <sensor_state_machine+0x42>
 25e:	22 23       	and	r18, r18
 260:	c9 f0       	breq	.+50     	; 0x294 <sensor_state_machine+0x42>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & _BV(i))
 266:	42 2f       	mov	r20, r18
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	ba 01       	movw	r22, r20
 26c:	08 2e       	mov	r0, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <sensor_state_machine+0x22>
 270:	75 95       	asr	r23
 272:	67 95       	ror	r22
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <sensor_state_machine+0x1e>
 278:	60 ff       	sbrs	r22, 0
 27a:	03 c0       	rjmp	.+6      	; 0x282 <sensor_state_machine+0x30>
            {
                current_channel = i;
 27c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
                break;
 280:	04 c0       	rjmp	.+8      	; 0x28a <sensor_state_machine+0x38>
 282:	01 96       	adiw	r24, 0x01	; 1
    uint8_t curchannels = adc_channels;

    if (current_channel < 0 && curchannels > 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 284:	88 30       	cpi	r24, 0x08	; 8
 286:	91 05       	cpc	r25, r1
 288:	81 f7       	brne	.-32     	; 0x26a <sensor_state_machine+0x18>
            {
                current_channel = i;
                break;
            }
        }
        ADMUX = current_channel | _BV(REFS0);
 28a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        // conversion will start when adc noise reduction mode is entered
        //ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 294:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <adc_complete_event>
 298:	88 23       	and	r24, r24
 29a:	39 f1       	breq	.+78     	; 0x2ea <sensor_state_machine+0x98>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 29c:	21 11       	cpse	r18, r1
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <sensor_state_machine+0x56>
            current_channel = -1;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
 2a6:	1e c0       	rjmp	.+60     	; 0x2e4 <sensor_state_machine+0x92>
        } else {
            // get the next channel
            int i = current_channel + 1;
 2a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 2ac:	08 2e       	mov	r0, r24
 2ae:	00 0c       	add	r0, r0
 2b0:	99 0b       	sbc	r25, r25
 2b2:	01 96       	adiw	r24, 0x01	; 1
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & _BV(i)) {
 2b4:	30 e0       	ldi	r19, 0x00	; 0
            current_channel = -1;
        } else {
            // get the next channel
            int i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 2b6:	88 30       	cpi	r24, 0x08	; 8
 2b8:	91 05       	cpc	r25, r1
 2ba:	8c f4       	brge	.+34     	; 0x2de <sensor_state_machine+0x8c>
            {
                if (curchannels & _BV(i)) {
 2bc:	a9 01       	movw	r20, r18
 2be:	08 2e       	mov	r0, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <sensor_state_machine+0x74>
 2c2:	55 95       	asr	r21
 2c4:	47 95       	ror	r20
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <sensor_state_machine+0x70>
 2ca:	40 ff       	sbrs	r20, 0
 2cc:	06 c0       	rjmp	.+12     	; 0x2da <sensor_state_machine+0x88>
                    current_channel = i;
 2ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion, with AVCC as reference
            ADMUX = current_channel | _BV(REFS0);
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <sensor_state_machine+0x92>
            {
                if (curchannels & _BV(i)) {
                    current_channel = i;
                    break;
                }
                ++i;
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	ec cf       	rjmp	.-40     	; 0x2b6 <sensor_state_machine+0x64>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	e9 cf       	rjmp	.-46     	; 0x2b6 <sensor_state_machine+0x64>
            // start new conversion, with AVCC as reference
            ADMUX = current_channel | _BV(REFS0);
            // conversion will start when adc noise reduction mode is entered
            //ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
 2e4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <adc_complete_event>
 2e8:	08 95       	ret
 2ea:	ee e0       	ldi	r30, 0x0E	; 14
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
        // conversion will start when adc noise reduction mode is entered
        //ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & _BV(i)) == 0)
 2f2:	82 2f       	mov	r24, r18
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	9c 01       	movw	r18, r24
 2f8:	04 2e       	mov	r0, r20
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <sensor_state_machine+0xae>
 2fc:	35 95       	asr	r19
 2fe:	27 95       	ror	r18
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <sensor_state_machine+0xaa>
 304:	20 fd       	sbrc	r18, 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <sensor_state_machine+0xba>
                adc_values[i] = 0;
 308:	11 82       	std	Z+1, r1	; 0x01
 30a:	10 82       	st	Z, r1
            //ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	32 96       	adiw	r30, 0x02	; 2
 312:	48 30       	cpi	r20, 0x08	; 8
 314:	51 05       	cpc	r21, r1
 316:	79 f7       	brne	.-34     	; 0x2f6 <sensor_state_machine+0xa4>
 318:	08 95       	ret

0000031a <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
    uint8_t low = ADCL;
 32e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    uint8_t high = ADCH;
 332:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 336:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current_channel>
 33a:	ee 0f       	add	r30, r30
 33c:	ff 0b       	sbc	r31, r31
 33e:	e2 5f       	subi	r30, 0xF2	; 242
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	92 2b       	or	r25, r18
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	80 83       	st	Z, r24
    adc_complete_event = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <adc_complete_event>
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <spi_init>:
void
spi_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    SPI_DIR &= ~(_BV(MOSI)|_BV(SCK));
 364:	84 b1       	in	r24, 0x04	; 4
 366:	87 7d       	andi	r24, 0xD7	; 215
 368:	84 b9       	out	0x04, r24	; 4
    CS_DIR &= ~(_BV(CS));
 36a:	22 98       	cbi	0x04, 2	; 4
    
    // set pullups on input pins
    SPI_PORT |= (_BV(MOSI)|_BV(SCK));
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	88 62       	ori	r24, 0x28	; 40
 370:	85 b9       	out	0x05, r24	; 5
    CS_PORT |= _BV(CS);
 372:	2a 9a       	sbi	0x05, 2	; 5
    
    // PORTB setup PINS for output
    SPI_DIR |= _BV(MISO);
 374:	24 9a       	sbi	0x04, 4	; 4

    // EEPROM to input, no pullup
    EEPROM_DIR &= ~_BV(EEPROM);
 376:	27 98       	cbi	0x04, 7	; 4
    
    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 378:	80 ec       	ldi	r24, 0xC0	; 192
 37a:	8c bd       	out	0x2c, r24	; 44
 37c:	08 95       	ret

0000037e <spi_pre_power_down>:

void
spi_pre_power_down(void)
{
    // shutdown modules
    SPCR = 0;
 37e:	1c bc       	out	0x2c, r1	; 44
    PRR |= _BV(PRSPI);
 380:	e4 e6       	ldi	r30, 0x64	; 100
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	84 60       	ori	r24, 0x04	; 4
 388:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    SPI_DIR &= ~(_BV(MISO));
 38a:	24 98       	cbi	0x04, 4	; 4
    SPI_PORT |= _BV(MISO);
 38c:	2c 9a       	sbi	0x05, 4	; 5
 38e:	08 95       	ret

00000390 <spi_post_power_down>:

void
spi_post_power_down(void)
{
    // MISO to output, pull-up off
    SPI_PORT &= ~(_BV(MISO));
 390:	2c 98       	cbi	0x05, 4	; 5
    SPI_DIR |= _BV(MISO);
 392:	24 9a       	sbi	0x04, 4	; 4

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 394:	e4 e6       	ldi	r30, 0x64	; 100
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    spi_state = 0;
 39e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <spi_state>
    SPCR = _BV(SPE)|_BV(SPIE);
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	8c bd       	out	0x2c, r24	; 44
 3a6:	08 95       	ret

000003a8 <spi_pre_adc_noise>:

void
spi_pre_adc_noise(void)
{
    // shutdown modules
    SPCR = 0;
 3a8:	1c bc       	out	0x2c, r1	; 44
    PRR |= _BV(PRSPI);
 3aa:	e4 e6       	ldi	r30, 0x64	; 100
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	84 60       	ori	r24, 0x04	; 4
 3b2:	80 83       	st	Z, r24
 3b4:	08 95       	ret

000003b6 <spi_post_adc_noise>:

void
spi_post_adc_noise(void)
{
    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 3b6:	e4 e6       	ldi	r30, 0x64	; 100
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    spi_state = 0;
 3c0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <spi_state>
    SPCR = _BV(SPE)|_BV(SPIE);
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	8c bd       	out	0x2c, r24	; 44
 3c8:	08 95       	ret

000003ca <spi_state_machine>:
    // entering/exiting ADC Noise Reduction state, so don't
    // touch the hardware or expect it to
    // to be working
    
    // toggle eeprom if chosen
    if (toggle_eeprom)
 3ca:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <toggle_eeprom>
 3ce:	88 23       	and	r24, r24
 3d0:	51 f0       	breq	.+20     	; 0x3e6 <spi_state_machine+0x1c>
    {
        if (bit_is_clear(EEPROM_PIN, EEPROM))
 3d2:	1f 99       	sbic	0x03, 7	; 3
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <spi_state_machine+0x10>
        {
            // set to input
            EEPROM_DIR &= ~_BV(EEPROM);
 3d6:	27 98       	cbi	0x04, 7	; 4
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <spi_state_machine+0x18>
        } else {
            // set to output, set low
            EEPROM_DIR |= _BV(EEPROM);
 3da:	27 9a       	sbi	0x04, 7	; 4
            EEPROM_PORT &= _BV(EEPROM);
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	80 78       	andi	r24, 0x80	; 128
 3e0:	85 b9       	out	0x05, r24	; 5
        }
        toggle_eeprom = 0;
 3e2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <toggle_eeprom>
    }
    // turn off interrupt flag
    spi_stc_event = 0;
 3e6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <spi_stc_event>
 3ea:	08 95       	ret

000003ec <__vector_17>:
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
 3fc:	ee b5       	in	r30, 0x2e	; 46
 3fe:	1a 99       	sbic	0x03, 2	; 3
 400:	47 c0       	rjmp	.+142    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 402:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <spi_state>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	b9 f1       	breq	.+110    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 40a:	38 f0       	brcs	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	3f c0       	rjmp	.+126    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 412:	1e bc       	out	0x2e, r1	; 46
 414:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <spi_state>
 418:	3b c0       	rjmp	.+118    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 41a:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <addr.1673>
 41e:	80 ef       	ldi	r24, 0xF0	; 240
 420:	8e 0f       	add	r24, r30
 422:	88 30       	cpi	r24, 0x08	; 8
 424:	80 f4       	brcc	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	e2 51       	subi	r30, 0x12	; 18
 42e:	ff 4f       	sbci	r31, 0xFF	; 255
 430:	80 81       	ld	r24, Z
 432:	8e bd       	out	0x2e, r24	; 46
 434:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <addr.1673>
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	e2 51       	subi	r30, 0x12	; 18
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	15 c0       	rjmp	.+42     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 446:	e2 30       	cpi	r30, 0x02	; 2
 448:	31 f4       	brne	.+12     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_channels>
 44e:	8e bd       	out	0x2e, r24	; 46
 450:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 454:	0f c0       	rjmp	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 456:	e3 30       	cpi	r30, 0x03	; 3
 458:	39 f4       	brne	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45a:	1e bc       	out	0x2e, r1	; 46
 45c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <toggle_eeprom>
 466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 468:	e4 30       	cpi	r30, 0x04	; 4
 46a:	21 f4       	brne	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46c:	1e bc       	out	0x2e, r1	; 46
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0a c0       	rjmp	.+20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 478:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 47c:	8e bd       	out	0x2e, r24	; 46
 47e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.1673>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	11 f4       	brne	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <adc_channels>
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <spi_state>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <spi_stc_event>
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	8f 91       	pop	r24
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <main>:
{
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    init();
 4a6:	0e 94 82 00 	call	0x104	; 0x104 <init>
    
    machine_state = prev_state = Start;
 4aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <prev_state>
 4ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <machine_state>
    button_mask = 0xFF;
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    wakeup_timer = -1;
 4b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    idle_timer = -1;
 4bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
    button_timer = -1;
 4c0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    WakeupEvent evt = Unknown;
    
	// start interrupts
	sei();
 4c4:	78 94       	sei
    machine_state = prev_state = Start;
    button_mask = 0xFF;
    wakeup_timer = -1;
    idle_timer = -1;
    button_timer = -1;
    WakeupEvent evt = Unknown;
 4c6:	d3 e0       	ldi	r29, 0x03	; 3
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(ADCNoiseEntry);
                idle_timer = -1;
 4c8:	cf ef       	ldi	r28, 0xFF	; 255

    // main loop
    while(1)
    {
/*--------------------------------------------------------*/
        switch (machine_state) {
 4ca:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <machine_state>
 4ce:	8e 2f       	mov	r24, r30
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	81 31       	cpi	r24, 0x11	; 17
 4d4:	91 05       	cpc	r25, r1
 4d6:	08 f0       	brcs	.+2      	; 0x4da <main+0x34>
 4d8:	cd c0       	rjmp	.+410    	; 0x674 <main+0x1ce>
 4da:	fc 01       	movw	r30, r24
 4dc:	ed 5b       	subi	r30, 0xBD	; 189
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
 4e0:	0c 94 4c 03 	jmp	0x698	; 0x698 <__tablejump2__>
            LED2_SET_ON;
            LED3_SET_OFF;
            LED4_SET_OFF;
            LED5_SET_OFF;
#endif
            ENABLE_SET_OFF;
 4e4:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_OFF;
 4e6:	2e 98       	cbi	0x05, 6	; 5
            change_state(Wait);
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	c5 c0       	rjmp	.+394    	; 0x676 <main+0x1d0>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 4ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            ENABLE_SET_OFF;
            SHUTDOWN_SET_OFF;
            change_state(Wait);
            break;
        case Wait:
            if (button_pressed())
 4f0:	81 11       	cpse	r24, r1
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <main+0x54>
                change_state(ButtonPress);
 4f4:	83 e0       	ldi	r24, 0x03	; 3
 4f6:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
// trigger when the wake up period is over
inline
int wake_up_expired(void)
{
    // this is 750ms
    if (wakeup_timer >= (uint8_t)(F_CPU/256/256/1.5))
 4fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 4fe:	81 35       	cpi	r24, 0x51	; 81
 500:	0c f0       	brlt	.+2      	; 0x504 <main+0x5e>
 502:	c2 c0       	rjmp	.+388    	; 0x688 <main+0x1e2>
 504:	ba c0       	rjmp	.+372    	; 0x67a <main+0x1d4>
            if (wake_up_expired())
                change_state(MCUOffEntry);
            break;
/*--------------------------------------------------------*/
        case ButtonPress:
            button_timer = 0;
 506:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <button_timer>
            change_state(ButtonRelease);
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	b4 c0       	rjmp	.+360    	; 0x676 <main+0x1d0>
/*--------------------------------------------------------*/
// trigger when button released
inline
int button_released(void)
{
    return button_mask == 0xFF;
 50e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
        case ButtonPress:
            button_timer = 0;
            change_state(ButtonRelease);
            break;
        case ButtonRelease:
            if (button_released()) {
 512:	8f 3f       	cpi	r24, 0xFF	; 255
 514:	09 f0       	breq	.+2      	; 0x518 <main+0x72>
 516:	b1 c0       	rjmp	.+354    	; 0x67a <main+0x1d4>
                // is delay long enough, wait 200ms
                if (button_timer >= (F_CPU/256/256/5)) {
 518:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <button_timer>
 51c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prev_state>
 520:	98 31       	cpi	r25, 0x18	; 24
 522:	60 f0       	brcs	.+24     	; 0x53c <main+0x96>
                    if (prev_state == Wait)
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	11 f4       	brne	.+4      	; 0x52c <main+0x86>
                        change_state(SignaledOnEntry);
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	11 c0       	rjmp	.+34     	; 0x54e <main+0xa8>
                    else if (prev_state == SignaledOn)
 52c:	86 30       	cpi	r24, 0x06	; 6
 52e:	11 f4       	brne	.+4      	; 0x534 <main+0x8e>
                        change_state(MCUOffEntry);
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	0d c0       	rjmp	.+26     	; 0x54e <main+0xa8>
                    else if (prev_state == MCURunning)
 534:	88 30       	cpi	r24, 0x08	; 8
 536:	69 f4       	brne	.+26     	; 0x552 <main+0xac>
                        change_state(SignaledOffEntry);
 538:	8b e0       	ldi	r24, 0x0B	; 11
 53a:	09 c0       	rjmp	.+18     	; 0x54e <main+0xa8>
                } else {
                    // delay too short
                    if (prev_state == Wait)
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	11 f4       	brne	.+4      	; 0x544 <main+0x9e>
                        change_state(WaitEntry);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	05 c0       	rjmp	.+10     	; 0x54e <main+0xa8>
                    else if (prev_state == SignaledOn)
 544:	86 30       	cpi	r24, 0x06	; 6
 546:	81 f3       	breq	.-32     	; 0x528 <main+0x82>
                        change_state(SignaledOnEntry);
                    else if (prev_state == MCURunning)
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	19 f4       	brne	.+6      	; 0x552 <main+0xac>
                        change_state(MCURunningEntry);
 54c:	87 e0       	ldi	r24, 0x07	; 7
 54e:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
                }
                button_timer = -1;
 552:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <button_timer>
 556:	91 c0       	rjmp	.+290    	; 0x67a <main+0x1d4>
            LED3_SET_ON;
            LED2_SET_OFF;
            LED4_SET_OFF;
            LED5_SET_OFF;
#endif
            wakeup_timer = -1;
 558:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <wakeup_timer>
            ENABLE_SET_ON;
 55c:	5c 9a       	sbi	0x0b, 4	; 11
            change_state(SignaledOn);
 55e:	86 e0       	ldi	r24, 0x06	; 6
 560:	8a c0       	rjmp	.+276    	; 0x676 <main+0x1d0>
            break;
        case SignaledOn:
            if (mcu_is_running())
 562:	19 9b       	sbis	0x03, 1	; 3
 564:	03 c0       	rjmp	.+6      	; 0x56c <main+0xc6>
                change_state(MCURunningEntry);
 566:	87 e0       	ldi	r24, 0x07	; 7
 568:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 56c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            change_state(SignaledOn);
            break;
        case SignaledOn:
            if (mcu_is_running())
                change_state(MCURunningEntry);
            if (button_pressed())
 570:	81 11       	cpse	r24, r1
 572:	83 c0       	rjmp	.+262    	; 0x67a <main+0x1d4>
                change_state(ButtonPress);
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	7f c0       	rjmp	.+254    	; 0x676 <main+0x1d0>
            LED4_SET_ON;
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED5_SET_OFF;
#endif
            idle_timer = 0;
 578:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <idle_timer>
            change_state(MCURunning);
 57c:	88 e0       	ldi	r24, 0x08	; 8
 57e:	7b c0       	rjmp	.+246    	; 0x676 <main+0x1d0>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 580:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
#endif
            idle_timer = 0;
            change_state(MCURunning);
            break;
        case MCURunning:
            if (button_pressed())
 584:	81 11       	cpse	r24, r1
 586:	05 c0       	rjmp	.+10     	; 0x592 <main+0xec>
            {
                change_state(ButtonPress);
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
                idle_timer = -1;
 58e:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
            }
            // if turned off via the desktop
            if (!mcu_is_running())
 592:	19 99       	sbic	0x03, 1	; 3
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <main+0xfa>
            {
                change_state(MCUOffEntry);
 596:	8d e0       	ldi	r24, 0x0D	; 13
 598:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
                idle_timer = -1;
 59c:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
// trigger when the idle period is over
inline
int idle_expired(void)
{
    // this is 375ms
    if (idle_timer >= (uint8_t)(F_CPU/256/256/3))
 5a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 5a4:	88 32       	cpi	r24, 0x28	; 40
 5a6:	0c f0       	brlt	.+2      	; 0x5aa <main+0x104>
 5a8:	71 c0       	rjmp	.+226    	; 0x68c <main+0x1e6>
 5aa:	67 c0       	rjmp	.+206    	; 0x67a <main+0x1d4>
            LED3_SET_OFF;
            LED4_SET_OFF;
            LED5_SET_OFF;
#endif
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 5ac:	e8 9a       	sbi	0x1d, 0	; 29
            spi_pre_adc_noise();
 5ae:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_pre_adc_noise>
            // enter Sleep mode
            set_sleep_mode(SLEEP_MODE_ADC);
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	81 7f       	andi	r24, 0xF1	; 241
 5b6:	82 60       	ori	r24, 0x02	; 2
 5b8:	83 bf       	out	0x33, r24	; 51
            sleep_enable();
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	81 60       	ori	r24, 0x01	; 1
 5be:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	83 bf       	out	0x33, r24	; 51
 5c6:	88 95       	sleep
 5c8:	83 b7       	in	r24, 0x33	; 51
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	83 bf       	out	0x33, r24	; 51
// as these are in priority order, if a higher priority
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
 5ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 5d2:	81 11       	cpse	r24, r1
 5d4:	0a c0       	rjmp	.+20     	; 0x5ea <main+0x144>
        return ButtonEvt;
    if (spi_stc_event)
 5d6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <spi_stc_event>
 5da:	81 11       	cpse	r24, r1
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <main+0x148>
        return SPItxfer;
    if (adc_complete_event)
 5de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <adc_complete_event>
 5e2:	81 11       	cpse	r24, r1
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <main+0x14c>
        return ADCcomplete;
    return Unknown;
 5e6:	d3 e0       	ldi	r29, 0x03	; 3
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <main+0x14e>
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
        return ButtonEvt;
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <main+0x14e>
    if (spi_stc_event)
        return SPItxfer;
 5ee:	d1 e0       	ldi	r29, 0x01	; 1
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <main+0x14e>
    if (adc_complete_event)
        return ADCcomplete;
 5f2:	d2 e0       	ldi	r29, 0x02	; 2
            set_sleep_mode(SLEEP_MODE_ADC);
            sleep_enable();
            sleep_mode();
            // get wakeup source
            evt = get_wakeup_event();
            change_state(ADCNoiseExit);
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
 5f6:	3f c0       	rjmp	.+126    	; 0x676 <main+0x1d0>
            break;
        case ADCNoiseExit:
            if (evt == ADCcomplete && mcu_is_running())
 5f8:	d2 30       	cpi	r29, 0x02	; 2
 5fa:	21 f4       	brne	.+8      	; 0x604 <main+0x15e>
 5fc:	19 9b       	sbis	0x03, 1	; 3
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <main+0x15e>
                change_state(ADCNoiseEntry);
 600:	89 e0       	ldi	r24, 0x09	; 9
 602:	39 c0       	rjmp	.+114    	; 0x676 <main+0x1d0>
            else {
                // turn off INT0 interrupt
                EIMSK &= ~(_BV(INT0));
 604:	e8 98       	cbi	0x1d, 0	; 29
                spi_post_adc_noise();
 606:	0e 94 db 01 	call	0x3b6	; 0x3b6 <spi_post_adc_noise>
                change_state(MCURunningEntry);
 60a:	87 e0       	ldi	r24, 0x07	; 7
 60c:	34 c0       	rjmp	.+104    	; 0x676 <main+0x1d0>
            LED5_SET_ON;
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            LED1_SET_ON;
 60e:	28 9a       	sbi	0x05, 0	; 5
            SHUTDOWN_SET_ON;
 610:	2e 9a       	sbi	0x05, 6	; 5
            change_state(SignaledOff);
 612:	8c e0       	ldi	r24, 0x0C	; 12
 614:	30 c0       	rjmp	.+96     	; 0x676 <main+0x1d0>
            break;
        case SignaledOff:
            if (!mcu_is_running())
 616:	19 99       	sbic	0x03, 1	; 3
 618:	30 c0       	rjmp	.+96     	; 0x67a <main+0x1d4>
            {
                LED1_SET_OFF;
 61a:	28 98       	cbi	0x05, 0	; 5
                SHUTDOWN_SET_OFF;
 61c:	2e 98       	cbi	0x05, 6	; 5
 61e:	34 c0       	rjmp	.+104    	; 0x688 <main+0x1e2>
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
            LED5_SET_OFF;
#endif
            ENABLE_SET_OFF;
 620:	5c 98       	cbi	0x0b, 4	; 11
            change_state(PowerDownEntry);
 622:	8f e0       	ldi	r24, 0x0F	; 15
 624:	28 c0       	rjmp	.+80     	; 0x676 <main+0x1d0>
            LED5_SET_OFF;
            LED6_SET_OFF;
            LED7_SET_OFF;
#endif
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 626:	83 b7       	in	r24, 0x33	; 51
 628:	81 7f       	andi	r24, 0xF1	; 241
 62a:	84 60       	ori	r24, 0x04	; 4
 62c:	83 bf       	out	0x33, r24	; 51

            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 62e:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 630:	2e 9a       	sbi	0x05, 6	; 5

            // modules power off
            sensor_pre_power_down();
 632:	0e 94 0f 01 	call	0x21e	; 0x21e <sensor_pre_power_down>
            spi_pre_power_down();
 636:	0e 94 bf 01 	call	0x37e	; 0x37e <spi_pre_power_down>
            
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 63a:	e8 9a       	sbi	0x1d, 0	; 29

            // do the power down, if no INT0 interrupt
            cli();
 63c:	f8 94       	cli
            if (!int0_event) {
 63e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 642:	81 11       	cpse	r24, r1
 644:	08 c0       	rjmp	.+16     	; 0x656 <main+0x1b0>
                sleep_enable();
 646:	83 b7       	in	r24, 0x33	; 51
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	83 bf       	out	0x33, r24	; 51
                sei();
 64c:	78 94       	sei
                sleep_cpu();
 64e:	88 95       	sleep
                sleep_disable();
 650:	83 b7       	in	r24, 0x33	; 51
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	83 bf       	out	0x33, r24	; 51
            }
            sei();
 656:	78 94       	sei
            change_state(PowerDownExit);
 658:	80 e1       	ldi	r24, 0x10	; 16
 65a:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
            // NO BREAK, fall through to PowerDownExit
/*--------------------------------------------------------*/
        case PowerDownExit:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 65e:	e8 98       	cbi	0x1d, 0	; 29
            
            spi_post_power_down();
 660:	0e 94 c8 01 	call	0x390	; 0x390 <spi_post_power_down>
            sensor_post_power_down();
 664:	0e 94 1a 01 	call	0x234	; 0x234 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 668:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 66a:	26 9a       	sbi	0x04, 6	; 4
            wakeup_timer = 0;
 66c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wakeup_timer>
            change_state(WaitEntry);
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	01 c0       	rjmp	.+2      	; 0x676 <main+0x1d0>
            break;
/*--------------------------------------------------------*/
        default:
            change_state(Start);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
        }
/*--------------------------------------------------------*/
        spi_state_machine();
 67a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <spi_state_machine>
        sensor_state_machine();
 67e:	0e 94 29 01 	call	0x252	; 0x252 <sensor_state_machine>

        int0_event = 0;
 682:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <int0_event>
    }
 686:	21 cf       	rjmp	.-446    	; 0x4ca <main+0x24>
            break;
        case Wait:
            if (button_pressed())
                change_state(ButtonPress);
            if (wake_up_expired())
                change_state(MCUOffEntry);
 688:	8d e0       	ldi	r24, 0x0D	; 13
 68a:	f5 cf       	rjmp	.-22     	; 0x676 <main+0x1d0>
                change_state(MCUOffEntry);
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(ADCNoiseEntry);
 68c:	89 e0       	ldi	r24, 0x09	; 9
 68e:	0e 94 9e 00 	call	0x13c	; 0x13c <change_state>
                idle_timer = -1;
 692:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
 696:	f1 cf       	rjmp	.-30     	; 0x67a <main+0x1d4>

00000698 <__tablejump2__>:
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	05 90       	lpm	r0, Z+
 69e:	f4 91       	lpm	r31, Z
 6a0:	e0 2d       	mov	r30, r0
 6a2:	09 94       	ijmp

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
