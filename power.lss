
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000702  2**0
                  ALLOC
  3 .stab         000019a4  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f85  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_17>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_21>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	1b 03       	fmul	r17, r19
  6a:	7b 02       	muls	r23, r27
  6c:	84 02       	muls	r24, r20
  6e:	93 02       	muls	r25, r19
  70:	9d 02       	muls	r25, r29
  72:	aa 02       	muls	r26, r26
  74:	b3 02       	muls	r27, r19
  76:	cb 02       	muls	r28, r27
  78:	d2 02       	muls	r29, r18
  7a:	e3 02       	muls	r30, r19
  7c:	eb 02       	muls	r30, r27
  7e:	ef 02       	muls	r30, r31
  80:	ef 02       	muls	r30, r31
  82:	f6 02       	muls	r31, r22
  84:	14 03       	mulsu	r17, r20

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 31       	cpi	r26, 0x1D	; 29
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
  a6:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init>:

void
init(void)
{
    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
  ae:	e4 e6       	ldi	r30, 0x64	; 100
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8a 6c       	ori	r24, 0xCA	; 202
  b6:	80 83       	st	Z, r24
    
    // timer set to CK/256, overflow interrupt enabled
    TCCR0B = _BV(CS02);
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
  c2:	53 98       	cbi	0x0a, 3	; 10

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
  c4:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
  c6:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
  c8:	26 9a       	sbi	0x04, 6	; 4

#ifdef USE_LED
    // PORTD setup PINS for output
    DDRD |= (_BV(LED2)|_BV(LED3)|_BV(LED4));
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 6e       	ori	r24, 0xE0	; 224
  ce:	8a b9       	out	0x0a, r24	; 10
    // PORTB setup PINS for output
    DDRB |= (_BV(LED1)|_BV(LED5)|_BV(LED6));
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	83 68       	ori	r24, 0x83	; 131
  d4:	84 b9       	out	0x04, r24	; 4
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1));
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	8c 7f       	andi	r24, 0xFC	; 252
  da:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (_BV(0)|_BV(1));
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	8b b9       	out	0x0b, r24	; 11
    DDRB &= ~(_BV(0)|_BV(1));
    PORTB |= (_BV(0)|_BV(1));
#endif
    
    // enable inactive is low
    ENABLE_SET_OFF;
  e2:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown inactive is low
    SHUTDOWN_SET_OFF;
  e4:	2e 98       	cbi	0x05, 6	; 5

    // the other components
    sensor_init();
  e6:	0e 94 c6 00 	call	0x18c	; 0x18c <sensor_init>
    spi_init();
  ea:	0c 94 ac 01 	jmp	0x358	; 0x358 <spi_init>

000000ee <change_state>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  ee:	f8 94       	cli
// change state
void
change_state(StateMachine new_state)
{
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        prev_state = machine_state;
  f0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <machine_state>
  f4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <prev_state>
        machine_state = new_state;
  f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <machine_state>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  fc:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
  fe:	08 95       	ret

00000100 <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
    button_mask <<= 1;
 10c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 110:	88 0f       	add	r24, r24
 112:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (BUTTON_ON)
 116:	4a 9b       	sbis	0x09, 2	; 9
 118:	04 c0       	rjmp	.+8      	; 0x122 <__vector_16+0x22>
        button_mask |= 1;
 11a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	03 c0       	rjmp	.+6      	; 0x128 <__vector_16+0x28>
    else
        button_mask &= ~1;
 122:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (button_state == 1)
 12c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_state>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	29 f4       	brne	.+10     	; 0x13e <__vector_16+0x3e>
        tovflows++;
 134:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tovflows>
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tovflows>
    if (wakeup_timer != 0xFF)
 13e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <wakeup_timer>
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	29 f0       	breq	.+10     	; 0x150 <__vector_16+0x50>
        wakeup_timer++;
 146:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <wakeup_timer>
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <wakeup_timer>
    if (idle_timer != 0xFF)
 150:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <idle_timer>
 154:	8f 3f       	cpi	r24, 0xFF	; 255
 156:	29 f0       	breq	.+10     	; 0x162 <__vector_16+0x62>
        idle_timer++;
 158:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <idle_timer>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <idle_timer>
#ifdef USE_LED
    TOGGLE_LED6;
 162:	29 9b       	sbis	0x05, 1	; 5
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_16+0x6a>
 166:	29 98       	cbi	0x05, 1	; 5
 168:	01 c0       	rjmp	.+2      	; 0x16c <__vector_16+0x6c>
 16a:	29 9a       	sbi	0x05, 1	; 5
#endif
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
    // does nothing but wake up the cpu
}
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <sensor_init>:

void
sensor_init(void)
{
    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 18c:	87 b1       	in	r24, 0x07	; 7
 18e:	80 7c       	andi	r24, 0xC0	; 192
 190:	87 b9       	out	0x07, r24	; 7

    // start the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 192:	8b e8       	ldi	r24, 0x8B	; 139
 194:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    // at start, no channels are in use
    adc_channels = 0;           /* the channels enabled mask */
 198:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <adc_channels>
    current_channel = -1;       /* channel currently measured */
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <current_channel+0x1>
 1a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_channel>
    adc_finished = 0;
 1a8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <adc_finished>
 1ac:	08 95       	ret

000001ae <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 1ae:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= _BV(PRADC);
 1b2:	e4 e6       	ldi	r30, 0x64	; 100
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	8f 63       	ori	r24, 0x3F	; 63
 1c0:	88 b9       	out	0x08, r24	; 8
 1c2:	08 95       	ret

000001c4 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // startup adc
    PRR &= ~(_BV(PRADC));
 1c4:	e4 e6       	ldi	r30, 0x64	; 100
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	80 83       	st	Z, r24
    // initialize the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 1ce:	8b e8       	ldi	r24, 0x8B	; 139
 1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <current_channel+0x1>
 1dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_channel>
    adc_finished = 0;
 1e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <adc_finished>
    
    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	80 7c       	andi	r24, 0xC0	; 192
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	08 95       	ret

000001ec <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 1ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adc_channels>
    if (curchannels > 0 && current_channel < 0)
 1f0:	88 23       	and	r24, r24
 1f2:	41 f1       	breq	.+80     	; 0x244 <sensor_state_machine+0x58>
 1f4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <current_channel>
 1f8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <current_channel+0x1>
 1fc:	37 ff       	sbrs	r19, 7
 1fe:	22 c0       	rjmp	.+68     	; 0x244 <sensor_state_machine+0x58>
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & (1<<i))
 204:	48 2f       	mov	r20, r24
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	ba 01       	movw	r22, r20
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <sensor_state_machine+0x26>
 20e:	75 95       	asr	r23
 210:	67 95       	ror	r22
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <sensor_state_machine+0x22>
 216:	60 ff       	sbrs	r22, 0
 218:	07 c0       	rjmp	.+14     	; 0x228 <sensor_state_machine+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 21a:	f8 94       	cli
            {
                ATOMIC_BLOCK(ATOMIC_FORCEON) {
                    current_channel = i;
 21c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <current_channel>
 220:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <current_channel+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 224:	78 94       	sei
                }
                break;
 226:	05 c0       	rjmp	.+10     	; 0x232 <sensor_state_machine+0x46>
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
    if (curchannels > 0 && current_channel < 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 22c:	26 30       	cpi	r18, 0x06	; 6
 22e:	31 05       	cpc	r19, r1
 230:	59 f7       	brne	.-42     	; 0x208 <sensor_state_machine+0x1c>
                    current_channel = i;
                }
                break;
            }
        }
        ADMUX = current_channel;
 232:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_channel>
 236:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

        // start a new conversion
        ADCSRA |= _BV(ADSC);
 23a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 23e:	90 64       	ori	r25, 0x40	; 64
 240:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 244:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <adc_finished>
 248:	99 23       	and	r25, r25
 24a:	09 f4       	brne	.+2      	; 0x24e <sensor_state_machine+0x62>
 24c:	41 c0       	rjmp	.+130    	; 0x2d0 <sensor_state_machine+0xe4>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 24e:	81 11       	cpse	r24, r1
 250:	09 c0       	rjmp	.+18     	; 0x264 <sensor_state_machine+0x78>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 252:	f8 94       	cli
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                current_channel = -1;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	9f ef       	ldi	r25, 0xFF	; 255
 258:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <current_channel+0x1>
 25c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 260:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 262:	2c c0       	rjmp	.+88     	; 0x2bc <sensor_state_machine+0xd0>
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
 264:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <current_channel>
 268:	2f 5f       	subi	r18, 0xFF	; 255
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & (1<<i)) {
 26a:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 26c:	26 30       	cpi	r18, 0x06	; 6
 26e:	20 f5       	brcc	.+72     	; 0x2b8 <sensor_state_machine+0xcc>
            {
                if (curchannels & (1<<i)) {
 270:	42 2f       	mov	r20, r18
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	bc 01       	movw	r22, r24
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <sensor_state_machine+0x92>
 27a:	75 95       	asr	r23
 27c:	67 95       	ror	r22
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <sensor_state_machine+0x8e>
 282:	60 ff       	sbrs	r22, 0
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <sensor_state_machine+0xba>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 286:	f8 94       	cli
                    ATOMIC_BLOCK(ATOMIC_FORCEON) {
                        current_channel = i;
 288:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <current_channel+0x1>
 28c:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 290:	78 94       	sei
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion
            ADMUX = current_channel;
 292:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <current_channel>
 296:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
            ADCSRA |= _BV(ADSC);
 29a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <sensor_state_machine+0xd0>
                        current_channel = i;
                    }
                    break;
                } else
                    // zero out channels not used
                    adc_values[i] = 0;
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	fa 01       	movw	r30, r20
 2ac:	e0 5f       	subi	r30, 0xF0	; 240
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	11 82       	std	Z+1, r1	; 0x01
 2b2:	10 82       	st	Z, r1
                ++i;
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	da cf       	rjmp	.-76     	; 0x26c <sensor_state_machine+0x80>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	da cf       	rjmp	.-76     	; 0x270 <sensor_state_machine+0x84>
            }
            // start new conversion
            ADMUX = current_channel;
            ADCSRA |= _BV(ADSC);
        }
        adc_finished = 0;
 2bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <adc_finished>
        if (prev_state == Idle || prev_state == IdleEntry)
 2c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prev_state>
 2c4:	87 50       	subi	r24, 0x07	; 7
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	f8 f4       	brcc	.+62     	; 0x308 <sensor_state_machine+0x11c>
            change_state(IdleEntry);
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	0c 94 77 00 	jmp	0xee	; 0xee <change_state>
 2d0:	e0 e1       	ldi	r30, 0x10	; 16
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
        // start a new conversion
        ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
        if (prev_state == Idle || prev_state == IdleEntry)
            change_state(IdleEntry);
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & (1 << i)) != (1 << i))
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ab 01       	movw	r20, r22
 2e0:	02 2e       	mov	r0, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <sensor_state_machine+0xfc>
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <sensor_state_machine+0xf8>
 2ec:	dc 01       	movw	r26, r24
 2ee:	a4 23       	and	r26, r20
 2f0:	b5 23       	and	r27, r21
 2f2:	4a 17       	cp	r20, r26
 2f4:	5b 07       	cpc	r21, r27
 2f6:	11 f0       	breq	.+4      	; 0x2fc <sensor_state_machine+0x110>
                adc_values[i] = 0;
 2f8:	11 82       	std	Z+1, r1	; 0x01
 2fa:	10 82       	st	Z, r1
        adc_finished = 0;
        if (prev_state == Idle || prev_state == IdleEntry)
            change_state(IdleEntry);
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	32 96       	adiw	r30, 0x02	; 2
 302:	26 30       	cpi	r18, 0x06	; 6
 304:	31 05       	cpc	r19, r1
 306:	59 f7       	brne	.-42     	; 0x2de <sensor_state_machine+0xf2>
 308:	08 95       	ret

0000030a <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
    uint8_t low, high;
    low = ADCL;
 31e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    high = ADCH;
 322:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 326:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <current_channel>
 32a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <current_channel+0x1>
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e0 5f       	subi	r30, 0xF0	; 240
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	92 2b       	or	r25, r18
 33a:	91 83       	std	Z+1, r25	; 0x01
 33c:	80 83       	st	Z, r24
    adc_finished = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <adc_finished>
}
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <spi_init>:
void
spi_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    SPI_DIR &= ~(_BV(MOSI)|_BV(SCK)|_BV(CS));
 358:	84 b1       	in	r24, 0x04	; 4
 35a:	83 7d       	andi	r24, 0xD3	; 211
 35c:	84 b9       	out	0x04, r24	; 4

    // set pullups on input pins
    SPI_PORT |= (_BV(MOSI)|_BV(SCK)|_BV(CS));
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	8c 62       	ori	r24, 0x2C	; 44
 362:	85 b9       	out	0x05, r24	; 5

    // PORTB setup PINS for output
    SPI_DIR |= _BV(MISO);
 364:	24 9a       	sbi	0x04, 4	; 4

    // EEPROM to input, no pullup
    EEPROM_DIR &= ~_BV(EEPROM);
 366:	27 98       	cbi	0x04, 7	; 4
    
    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	8c bd       	out	0x2c, r24	; 44
 36c:	08 95       	ret

0000036e <spi_pre_power_down>:

void
spi_pre_power_down(void)
{
    // shutdown modules
    PRR |= _BV(PRSPI);
 36e:	e4 e6       	ldi	r30, 0x64	; 100
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	84 60       	ori	r24, 0x04	; 4
 376:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    SPI_DIR &= ~(_BV(MISO));
 378:	24 98       	cbi	0x04, 4	; 4
    SPI_PORT |= _BV(MISO);
 37a:	2c 9a       	sbi	0x05, 4	; 5
 37c:	08 95       	ret

0000037e <spi_post_power_down>:

void
spi_post_power_down(void)
{
    // MISO to output, pull-up off
    SPI_PORT &= ~(_BV(MISO));
 37e:	2c 98       	cbi	0x05, 4	; 5
    SPI_DIR |= _BV(MISO);
 380:	24 9a       	sbi	0x04, 4	; 4

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 382:	e4 e6       	ldi	r30, 0x64	; 100
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8b 7f       	andi	r24, 0xFB	; 251
 38a:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 38c:	80 ec       	ldi	r24, 0xC0	; 192
 38e:	8c bd       	out	0x2c, r24	; 44
 390:	08 95       	ret

00000392 <spi_state_machine>:

void
spi_state_machine(void)
{
    // toggle eeprom if chosen
    if (toggle_eeprom)
 392:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <toggle_eeprom>
 396:	88 23       	and	r24, r24
 398:	51 f0       	breq	.+20     	; 0x3ae <spi_state_machine+0x1c>
    {
        if (bit_is_clear(EEPROM_PIN, EEPROM))
 39a:	1f 99       	sbic	0x03, 7	; 3
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <spi_state_machine+0x10>
        {
            // set to input
            EEPROM_DIR &= ~_BV(EEPROM);
 39e:	27 98       	cbi	0x04, 7	; 4
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <spi_state_machine+0x18>
        } else {
            // set to output, set low
            EEPROM_DIR |= _BV(EEPROM);
 3a2:	27 9a       	sbi	0x04, 7	; 4
            EEPROM_PORT &= _BV(EEPROM);
 3a4:	85 b1       	in	r24, 0x05	; 5
 3a6:	80 78       	andi	r24, 0x80	; 128
 3a8:	85 b9       	out	0x05, r24	; 5
        }
        toggle_eeprom = 0;
 3aa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <toggle_eeprom>
 3ae:	08 95       	ret

000003b0 <__vector_17>:
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
 3c2:	ee b5       	in	r30, 0x2e	; 46
 3c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <spi_state.1655>
 3c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <spi_state.1655+0x1>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	89 f1       	breq	.+98     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	91 05       	cpc	r25, r1
 3d6:	f1 f1       	breq	.+124    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3d8:	89 2b       	or	r24, r25
 3da:	09 f0       	breq	.+2      	; 0x3de <__vector_17+0x2e>
 3dc:	40 c0       	rjmp	.+128    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3de:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <addr.1654>
 3e2:	80 ef       	ldi	r24, 0xF0	; 240
 3e4:	8e 0f       	add	r24, r30
 3e6:	86 30       	cpi	r24, 0x06	; 6
 3e8:	90 f4       	brcc	.+36     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e0 51       	subi	r30, 0x10	; 16
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	80 81       	ld	r24, Z
 3f6:	8e bd       	out	0x2e, r24	; 46
 3f8:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <addr.1654>
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	e0 51       	subi	r30, 0x10	; 16
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	81 81       	ldd	r24, Z+1	; 0x01
 408:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 40c:	10 c0       	rjmp	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40e:	e2 30       	cpi	r30, 0x02	; 2
 410:	31 f4       	brne	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adc_channels>
 416:	8e bd       	out	0x2e, r24	; 46
 418:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 41c:	08 c0       	rjmp	.+16     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 41e:	e3 30       	cpi	r30, 0x03	; 3
 420:	31 f4       	brne	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 422:	1e bc       	out	0x2e, r1	; 46
 424:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <toggle_eeprom>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0b c0       	rjmp	.+22     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 434:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 438:	8e bd       	out	0x2e, r24	; 46
 43a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <addr.1654>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <adc_channels>
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <spi_state.1655+0x1>
 44e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <spi_state.1655>
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 454:	1e bc       	out	0x2e, r1	; 46
 456:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spi_state.1655+0x1>
 45a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <spi_state.1655>
 45e:	28 9b       	sbis	0x05, 0	; 5
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	28 98       	cbi	0x05, 0	; 5
 464:	01 c0       	rjmp	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	28 9a       	sbi	0x05, 0	; 5
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <main>:
{
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    init();
 47a:	0e 94 57 00 	call	0xae	; 0xae <init>
    
    machine_state = prev_state = Start;
 47e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <prev_state>
 482:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <machine_state>
    button_mask = 0xFF;
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    idle_timer = 0xFF;
 48c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <idle_timer>
    
	// start interrupts
	sei();
 490:	78 94       	sei
    while(1)
    {
/*--------------------------------------------------------*/
        // check if button down, mask length is 66ms
        if (button_mask == 0x00 && button_state == 0) {
            button_state = 1;
 492:	d1 e0       	ldi	r29, 0x01	; 1
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED3_SET_OFF;
#endif
            SHUTDOWN_SET_ON;
            machine_state = SignaledOff;
 494:	1a e0       	ldi	r17, 0x0A	; 10
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            machine_state = Idle;
 496:	08 e0       	ldi	r16, 0x08	; 8
                idle_timer = 0xFF;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
                idle_timer = 0xFF;
 498:	cf ef       	ldi	r28, 0xFF	; 255
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED4_SET_OFF;
#endif
            idle_timer = 0;
            machine_state = MCURunning;
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	f8 2e       	mov	r15, r24
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            wakeup_timer = 0xFF;
            ENABLE_SET_ON;
            machine_state = SignaledOn;
 49e:	94 e0       	ldi	r25, 0x04	; 4
 4a0:	e9 2e       	mov	r14, r25
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            ENABLE_SET_OFF;
            SHUTDOWN_SET_OFF;
            machine_state = Wait;
 4a2:	22 e0       	ldi	r18, 0x02	; 2
 4a4:	d2 2e       	mov	r13, r18
    // main loop
    while(1)
    {
/*--------------------------------------------------------*/
        // check if button down, mask length is 66ms
        if (button_mask == 0x00 && button_state == 0) {
 4a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <button_mask>
 4aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_state>
 4ae:	91 11       	cpse	r25, r1
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <main+0x46>
 4b2:	81 11       	cpse	r24, r1
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <main+0x46>
            button_state = 1;
 4b6:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <button_state>
            tovflows = 0;
 4ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tovflows>
 4be:	0e c0       	rjmp	.+28     	; 0x4dc <main+0x62>
            // has it been down for long enough
        } else if (button_state == 1) {
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	61 f4       	brne	.+24     	; 0x4dc <main+0x62>
            if (button_mask == 0x0FF) {
 4c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <button_mask>
 4c8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ca:	41 f4       	brne	.+16     	; 0x4dc <main+0x62>
                // is delay long enough, wait 200ms
                if (tovflows >= (F_CPU/256/256/5)) {
 4cc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <tovflows>
 4d0:	98 31       	cpi	r25, 0x18	; 24
 4d2:	10 f0       	brcs	.+4      	; 0x4d8 <main+0x5e>
                    buttonpress = 1;
 4d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <buttonpress>
                }
                button_state = 0;
 4d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <button_state>
            }
        }
        
/*--------------------------------------------------------*/
        switch (machine_state) {
 4dc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <machine_state>
 4e0:	8e 2f       	mov	r24, r30
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	8f 30       	cpi	r24, 0x0F	; 15
 4e6:	91 05       	cpc	r25, r1
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <main+0x72>
 4ea:	a9 c0       	rjmp	.+338    	; 0x63e <main+0x1c4>
 4ec:	fc 01       	movw	r30, r24
 4ee:	ec 5c       	subi	r30, 0xCC	; 204
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__tablejump2__>
            change_state(WaitEntry);
            break;
/*--------------------------------------------------------*/
        case WaitEntry:
#ifdef USE_LED
            LED1_SET_ON;
 4f6:	2f 9a       	sbi	0x05, 7	; 5
            LED2_SET_OFF;
 4f8:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 4fa:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 4fc:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 4fe:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_OFF;
 500:	2e 98       	cbi	0x05, 6	; 5
            machine_state = Wait;
 502:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <machine_state>
            break;
 506:	9e c0       	rjmp	.+316    	; 0x644 <main+0x1ca>
/*--------------------------------------------------------*/
// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 508:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buttonpress>
 50c:	88 23       	and	r24, r24
 50e:	29 f0       	breq	.+10     	; 0x51a <main+0xa0>
        buttonpress = 0;
 510:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <buttonpress>
            SHUTDOWN_SET_OFF;
            machine_state = Wait;
            break;
        case Wait:
            if (button_pressed())
                change_state(SignaledOnEntry);
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	0e 94 77 00 	call	0xee	; 0xee <change_state>
// trigger when the wake up period is over
inline
int wake_up_expired(void)
{
    // this is 750ms
    if (wakeup_timer >= (uint8_t)(F_CPU/256/256/1.5))
 51a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <wakeup_timer>
 51e:	81 35       	cpi	r24, 0x51	; 81
 520:	08 f0       	brcs	.+2      	; 0x524 <main+0xaa>
 522:	95 c0       	rjmp	.+298    	; 0x64e <main+0x1d4>
 524:	8f c0       	rjmp	.+286    	; 0x644 <main+0x1ca>
                change_state(MCUOffEntry);
            break;
/*--------------------------------------------------------*/
        case SignaledOnEntry:
#ifdef USE_LED
            LED2_SET_ON;
 526:	5d 9a       	sbi	0x0b, 5	; 11
            LED1_SET_OFF;
 528:	2f 98       	cbi	0x05, 7	; 5
            LED3_SET_OFF;
 52a:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 52c:	5f 98       	cbi	0x0b, 7	; 11
#endif
            wakeup_timer = 0xFF;
 52e:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <wakeup_timer>
            ENABLE_SET_ON;
 532:	5c 9a       	sbi	0x0b, 4	; 11
            machine_state = SignaledOn;
 534:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <machine_state>
            break;
 538:	85 c0       	rjmp	.+266    	; 0x644 <main+0x1ca>
        case SignaledOn:
            if (mcu_is_running())
 53a:	4b 9b       	sbis	0x09, 3	; 9
 53c:	03 c0       	rjmp	.+6      	; 0x544 <main+0xca>
                change_state(MCURunningEntry);
 53e:	85 e0       	ldi	r24, 0x05	; 5
 540:	0e 94 77 00 	call	0xee	; 0xee <change_state>
/*--------------------------------------------------------*/
// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 544:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buttonpress>
 548:	88 23       	and	r24, r24
 54a:	09 f4       	brne	.+2      	; 0x54e <main+0xd4>
 54c:	7b c0       	rjmp	.+246    	; 0x644 <main+0x1ca>
        buttonpress = 0;
 54e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <buttonpress>
 552:	7d c0       	rjmp	.+250    	; 0x64e <main+0x1d4>
                change_state(MCUOffEntry);
            break;
/*--------------------------------------------------------*/
        case MCURunningEntry:
#ifdef USE_LED
            LED3_SET_ON;
 554:	5e 9a       	sbi	0x0b, 6	; 11
            LED1_SET_OFF;
 556:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 558:	5d 98       	cbi	0x0b, 5	; 11
            LED4_SET_OFF;
 55a:	5f 98       	cbi	0x0b, 7	; 11
#endif
            idle_timer = 0;
 55c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <idle_timer>
            machine_state = MCURunning;
 560:	f0 92 0a 01 	sts	0x010A, r15	; 0x80010a <machine_state>
            break;
 564:	6f c0       	rjmp	.+222    	; 0x644 <main+0x1ca>
/*--------------------------------------------------------*/
// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 566:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buttonpress>
 56a:	88 23       	and	r24, r24
 56c:	39 f0       	breq	.+14     	; 0x57c <main+0x102>
        buttonpress = 0;
 56e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <buttonpress>
            machine_state = MCURunning;
            break;
        case MCURunning:
            if (button_pressed())
            {
                change_state(SignaledOffEntry);
 572:	89 e0       	ldi	r24, 0x09	; 9
 574:	0e 94 77 00 	call	0xee	; 0xee <change_state>
                idle_timer = 0xFF;
 578:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <idle_timer>
            }
            // if turned off via the desktop
            if (!mcu_is_running())
 57c:	4b 99       	sbic	0x09, 3	; 9
 57e:	05 c0       	rjmp	.+10     	; 0x58a <main+0x110>
            {
                change_state(MCUOffEntry);
 580:	8b e0       	ldi	r24, 0x0B	; 11
 582:	0e 94 77 00 	call	0xee	; 0xee <change_state>
                idle_timer = 0xFF;
 586:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <idle_timer>
// trigger when the idle period is over
inline
int idle_expired(void)
{
    // this is 750ms
    if (idle_timer >= (uint8_t)(F_CPU/256/256/1.5))
 58a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <idle_timer>
 58e:	81 35       	cpi	r24, 0x51	; 81
 590:	08 f0       	brcs	.+2      	; 0x594 <main+0x11a>
 592:	5f c0       	rjmp	.+190    	; 0x652 <main+0x1d8>
 594:	57 c0       	rjmp	.+174    	; 0x644 <main+0x1ca>
            }
            break;
/*--------------------------------------------------------*/
        case IdleEntry:
#ifdef USE_LED
            LED1_SET_OFF;
 596:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 598:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 59a:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 59c:	5f 98       	cbi	0x0b, 7	; 11
#endif
            machine_state = Idle;
 59e:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <machine_state>
            break;
 5a2:	50 c0       	rjmp	.+160    	; 0x644 <main+0x1ca>
        case Idle:
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 5a4:	e8 9a       	sbi	0x1d, 0	; 29
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_IDLE);
 5a6:	83 b7       	in	r24, 0x33	; 51
 5a8:	81 7f       	andi	r24, 0xF1	; 241
 5aa:	83 bf       	out	0x33, r24	; 51

            // do the power down
            sleep_enable();
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	81 60       	ori	r24, 0x01	; 1
 5b0:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	83 bf       	out	0x33, r24	; 51
 5b8:	88 95       	sleep
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	83 bf       	out	0x33, r24	; 51

            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 5c0:	e8 98       	cbi	0x1d, 0	; 29
            change_state(MCURunningEntry);
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	3d c0       	rjmp	.+122    	; 0x640 <main+0x1c6>
            break;
/*--------------------------------------------------------*/
        case SignaledOffEntry:
#ifdef USE_LED
            LED4_SET_ON;
 5c6:	5f 9a       	sbi	0x0b, 7	; 11
            LED1_SET_OFF;
 5c8:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 5ca:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 5cc:	5e 98       	cbi	0x0b, 6	; 11
#endif
            SHUTDOWN_SET_ON;
 5ce:	2e 9a       	sbi	0x05, 6	; 5
            machine_state = SignaledOff;
 5d0:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <machine_state>
            break;
 5d4:	37 c0       	rjmp	.+110    	; 0x644 <main+0x1ca>
        case SignaledOff:
            if (!mcu_is_running())
 5d6:	4b 99       	sbic	0x09, 3	; 9
 5d8:	35 c0       	rjmp	.+106    	; 0x644 <main+0x1ca>
            {
                SHUTDOWN_SET_OFF;
 5da:	2e 98       	cbi	0x05, 6	; 5
 5dc:	38 c0       	rjmp	.+112    	; 0x64e <main+0x1d4>
            }
            break;
/*--------------------------------------------------------*/
        case MCUOffEntry: case MCUOff:
#ifdef USE_LED
            LED1_SET_OFF;
 5de:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 5e0:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 5e2:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 5e4:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 5e6:	5c 98       	cbi	0x0b, 4	; 11
            change_state(PowerDownEntry);
 5e8:	8d e0       	ldi	r24, 0x0D	; 13
 5ea:	2a c0       	rjmp	.+84     	; 0x640 <main+0x1c6>
            break;
/*--------------------------------------------------------*/
        case PowerDownEntry:
#ifdef USE_LED
            LED1_SET_OFF;
 5ec:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 5ee:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 5f0:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 5f2:	5f 98       	cbi	0x0b, 7	; 11
            LED5_SET_OFF;
 5f4:	28 98       	cbi	0x05, 0	; 5
            LED6_SET_OFF;
 5f6:	29 98       	cbi	0x05, 1	; 5
#endif
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 5f8:	83 b7       	in	r24, 0x33	; 51
 5fa:	81 7f       	andi	r24, 0xF1	; 241
 5fc:	84 60       	ori	r24, 0x04	; 4
 5fe:	83 bf       	out	0x33, r24	; 51

            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 600:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 602:	2e 9a       	sbi	0x05, 6	; 5
            sensor_pre_power_down();
 604:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sensor_pre_power_down>
            spi_pre_power_down();
 608:	0e 94 b7 01 	call	0x36e	; 0x36e <spi_pre_power_down>
            
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 60c:	e8 9a       	sbi	0x1d, 0	; 29

            // do the power down
            sleep_enable();
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	81 60       	ori	r24, 0x01	; 1
 612:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 614:	83 b7       	in	r24, 0x33	; 51
 616:	81 60       	ori	r24, 0x01	; 1
 618:	83 bf       	out	0x33, r24	; 51
 61a:	88 95       	sleep
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	83 bf       	out	0x33, r24	; 51
            // woken up
            change_state(PowerDown);
 622:	8e e0       	ldi	r24, 0x0E	; 14
 624:	0e 94 77 00 	call	0xee	; 0xee <change_state>
            // fall through to next state, so we don't
            // call other state machines
/*--------------------------------------------------------*/
        case PowerDown:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 628:	e8 98       	cbi	0x1d, 0	; 29
            spi_post_power_down();
 62a:	0e 94 bf 01 	call	0x37e	; 0x37e <spi_post_power_down>
            sensor_post_power_down();
 62e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 632:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 634:	26 9a       	sbi	0x04, 6	; 4
            wakeup_timer = 0;
 636:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <wakeup_timer>
            change_state(WaitEntry);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	01 c0       	rjmp	.+2      	; 0x640 <main+0x1c6>
            break;
/*--------------------------------------------------------*/
        default:
            change_state(Start);
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 77 00 	call	0xee	; 0xee <change_state>
        }
/*--------------------------------------------------------*/
        spi_state_machine();
 644:	0e 94 c9 01 	call	0x392	; 0x392 <spi_state_machine>
        sensor_state_machine();
 648:	0e 94 f6 00 	call	0x1ec	; 0x1ec <sensor_state_machine>
    }
 64c:	2c cf       	rjmp	.-424    	; 0x4a6 <main+0x2c>
            break;
        case Wait:
            if (button_pressed())
                change_state(SignaledOnEntry);
            if (wake_up_expired())
                change_state(MCUOffEntry);
 64e:	8b e0       	ldi	r24, 0x0B	; 11
 650:	f7 cf       	rjmp	.-18     	; 0x640 <main+0x1c6>
                change_state(MCUOffEntry);
                idle_timer = 0xFF;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
 652:	87 e0       	ldi	r24, 0x07	; 7
 654:	0e 94 77 00 	call	0xee	; 0xee <change_state>
                idle_timer = 0xFF;
 658:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <idle_timer>
 65c:	f3 cf       	rjmp	.-26     	; 0x644 <main+0x1ca>

0000065e <__tablejump2__>:
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	05 90       	lpm	r0, Z+
 664:	f4 91       	lpm	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	09 94       	ijmp

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
