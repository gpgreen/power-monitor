
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005e4  00000678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  00000678  2**0
                  ALLOC
  3 .stab         00001824  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002dc1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dd4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000039aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_16>
  44:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_17>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_21>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	de 02       	muls	r29, r30
  6a:	65 02       	muls	r22, r21
  6c:	6e 02       	muls	r22, r30
  6e:	7b 02       	muls	r23, r27
  70:	85 02       	muls	r24, r21
  72:	90 02       	muls	r25, r16
  74:	97 02       	muls	r25, r23
  76:	a4 02       	muls	r26, r20
  78:	ac 02       	muls	r26, r28
  7a:	b2 02       	muls	r27, r18
  7c:	b2 02       	muls	r27, r18
  7e:	ba 02       	muls	r27, r26
  80:	d7 02       	muls	r29, r23

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a0 e0       	ldi	r26, 0x00	; 0
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	ab 31       	cpi	r26, 0x1B	; 27
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  a2:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <init>:

void
init(void)
{
    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
  aa:	e4 e6       	ldi	r30, 0x64	; 100
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8a 6c       	ori	r24, 0xCA	; 202
  b2:	80 83       	st	Z, r24
    
    // timer set to CK/256, overflow interrupt enabled
    TCCR0B = _BV(CS02);
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
  be:	53 98       	cbi	0x0a, 3	; 10

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
  c0:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
  c2:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
  c4:	26 9a       	sbi	0x04, 6	; 4

#ifdef USE_LED
    // PORTD setup PINS for output
    DDRD |= (_BV(LED2)|_BV(LED3)|_BV(LED4));
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 6e       	ori	r24, 0xE0	; 224
  ca:	8a b9       	out	0x0a, r24	; 10
    // PORTB setup PINS for output
    DDRB |= (_BV(LED1)|_BV(LED5)|_BV(LED6));
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	83 68       	ori	r24, 0x83	; 131
  d0:	84 b9       	out	0x04, r24	; 4
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1));
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (_BV(0)|_BV(1));
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	8b b9       	out	0x0b, r24	; 11
    DDRB &= ~(_BV(0)|_BV(1));
    PORTB |= (_BV(0)|_BV(1));
#endif
    
    // enable inactive is low
    ENABLE_SET_OFF;
  de:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown inactive is high
    SHUTDOWN_SET_ON;
  e0:	2e 9a       	sbi	0x05, 6	; 5

    // the other components
    sensor_init();
  e2:	0e 94 b0 00 	call	0x160	; 0x160 <sensor_init>
    spi_init();
  e6:	0c 94 8e 01 	jmp	0x31c	; 0x31c <spi_init>

000000ea <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
    button_mask <<= 1;
  f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
  fa:	88 0f       	add	r24, r24
  fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    if (BUTTON_ON)
 100:	4a 9b       	sbis	0x09, 2	; 9
 102:	04 c0       	rjmp	.+8      	; 0x10c <__vector_16+0x22>
        button_mask |= 1;
 104:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	03 c0       	rjmp	.+6      	; 0x112 <__vector_16+0x28>
    else
        button_mask &= ~1;
 10c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    if (button_state == 1)
 116:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <button_state>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	29 f4       	brne	.+10     	; 0x128 <__vector_16+0x3e>
        tovflows++;
 11e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tovflows>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tovflows>
    if (wakeup_timer >= 0)
 128:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
        wakeup_timer++;
 12c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
#ifdef USE_LED
    TOGGLE_LED6;
 136:	29 9b       	sbis	0x05, 1	; 5
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_16+0x54>
 13a:	29 98       	cbi	0x05, 1	; 5
 13c:	01 c0       	rjmp	.+2      	; 0x140 <__vector_16+0x56>
 13e:	29 9a       	sbi	0x05, 1	; 5
#endif
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
    // does nothing but wake up the cpu
}
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <sensor_init>:

void
sensor_init(void)
{
    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 160:	87 b1       	in	r24, 0x07	; 7
 162:	80 7c       	andi	r24, 0xC0	; 192
 164:	87 b9       	out	0x07, r24	; 7

    // start the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 166:	8b e8       	ldi	r24, 0x8B	; 139
 168:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    // at start, no channels are in use
    adc_channels = 0;           /* the channels enabled mask */
 16c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_channels>
    current_channel = -1;       /* channel currently measured */
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 178:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    adc_finished = 0;
 17c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <adc_finished>
 180:	08 95       	ret

00000182 <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 182:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= _BV(PRADC);
 186:	e4 e6       	ldi	r30, 0x64	; 100
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 190:	88 b1       	in	r24, 0x08	; 8
 192:	8f 63       	ori	r24, 0x3F	; 63
 194:	88 b9       	out	0x08, r24	; 8
 196:	08 95       	ret

00000198 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // startup adc
    PRR &= ~(_BV(PRADC));
 198:	e4 e6       	ldi	r30, 0x64	; 100
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
    // initialize the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 1a2:	8b e8       	ldi	r24, 0x8B	; 139
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	9f ef       	ldi	r25, 0xFF	; 255
 1ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 1b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    adc_finished = 0;
 1b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <adc_finished>
    
    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	80 7c       	andi	r24, 0xC0	; 192
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	08 95       	ret

000001c0 <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 1c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_channels>
    if (curchannels > 0 && current_channel < 0)
 1c4:	88 23       	and	r24, r24
 1c6:	41 f1       	breq	.+80     	; 0x218 <sensor_state_machine+0x58>
 1c8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 1cc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <current_channel+0x1>
 1d0:	37 ff       	sbrs	r19, 7
 1d2:	22 c0       	rjmp	.+68     	; 0x218 <sensor_state_machine+0x58>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & (1<<i))
 1d8:	48 2f       	mov	r20, r24
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	ba 01       	movw	r22, r20
 1de:	02 2e       	mov	r0, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <sensor_state_machine+0x26>
 1e2:	75 95       	asr	r23
 1e4:	67 95       	ror	r22
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <sensor_state_machine+0x22>
 1ea:	60 ff       	sbrs	r22, 0
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <sensor_state_machine+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ee:	f8 94       	cli
            {
                ATOMIC_BLOCK(ATOMIC_FORCEON) {
                    current_channel = i;
 1f0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <current_channel>
 1f4:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <current_channel+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 1f8:	78 94       	sei
                }
                break;
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <sensor_state_machine+0x46>
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
    if (curchannels > 0 && current_channel < 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 200:	26 30       	cpi	r18, 0x06	; 6
 202:	31 05       	cpc	r19, r1
 204:	59 f7       	brne	.-42     	; 0x1dc <sensor_state_machine+0x1c>
                    current_channel = i;
                }
                break;
            }
        }
        ADMUX = current_channel;
 206:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_channel>
 20a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

        // start a new conversion
        ADCSRA |= _BV(ADSC);
 20e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 212:	90 64       	ori	r25, 0x40	; 64
 214:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 218:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <adc_finished>
 21c:	99 23       	and	r25, r25
 21e:	d1 f1       	breq	.+116    	; 0x294 <sensor_state_machine+0xd4>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 220:	81 11       	cpse	r24, r1
 222:	09 c0       	rjmp	.+18     	; 0x236 <sensor_state_machine+0x76>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 224:	f8 94       	cli
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                current_channel = -1;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 22e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 232:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 234:	2c c0       	rjmp	.+88     	; 0x28e <sensor_state_machine+0xce>
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
 236:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 23a:	2f 5f       	subi	r18, 0xFF	; 255
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & (1<<i)) {
 23c:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 23e:	26 30       	cpi	r18, 0x06	; 6
 240:	20 f5       	brcc	.+72     	; 0x28a <sensor_state_machine+0xca>
            {
                if (curchannels & (1<<i)) {
 242:	42 2f       	mov	r20, r18
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	bc 01       	movw	r22, r24
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <sensor_state_machine+0x90>
 24c:	75 95       	asr	r23
 24e:	67 95       	ror	r22
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <sensor_state_machine+0x8c>
 254:	60 ff       	sbrs	r22, 0
 256:	10 c0       	rjmp	.+32     	; 0x278 <sensor_state_machine+0xb8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 258:	f8 94       	cli
                    ATOMIC_BLOCK(ATOMIC_FORCEON) {
                        current_channel = i;
 25a:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <current_channel+0x1>
 25e:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 262:	78 94       	sei
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion
            ADMUX = current_channel;
 264:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 268:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
            ADCSRA |= _BV(ADSC);
 26c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 276:	0b c0       	rjmp	.+22     	; 0x28e <sensor_state_machine+0xce>
                        current_channel = i;
                    }
                    break;
                } else
                    // zero out channels not used
                    adc_values[i] = 0;
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	fa 01       	movw	r30, r20
 27e:	e2 5f       	subi	r30, 0xF2	; 242
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
                ++i;
 286:	2f 5f       	subi	r18, 0xFF	; 255
 288:	da cf       	rjmp	.-76     	; 0x23e <sensor_state_machine+0x7e>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	da cf       	rjmp	.-76     	; 0x242 <sensor_state_machine+0x82>
            }
            // start new conversion
            ADMUX = current_channel;
            ADCSRA |= _BV(ADSC);
        }
        adc_finished = 0;
 28e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <adc_finished>
 292:	08 95       	ret
 294:	ee e0       	ldi	r30, 0x0E	; 14
 296:	f1 e0       	ldi	r31, 0x01	; 1
        // start a new conversion
        ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_finished)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
        }
        adc_finished = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & (1 << i)) != (1 << i))
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ab 01       	movw	r20, r22
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <sensor_state_machine+0xec>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <sensor_state_machine+0xe8>
 2b0:	dc 01       	movw	r26, r24
 2b2:	a4 23       	and	r26, r20
 2b4:	b5 23       	and	r27, r21
 2b6:	4a 17       	cp	r20, r26
 2b8:	5b 07       	cpc	r21, r27
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <sensor_state_machine+0x100>
                adc_values[i] = 0;
 2bc:	11 82       	std	Z+1, r1	; 0x01
 2be:	10 82       	st	Z, r1
            ADCSRA |= _BV(ADSC);
        }
        adc_finished = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	32 96       	adiw	r30, 0x02	; 2
 2c6:	26 30       	cpi	r18, 0x06	; 6
 2c8:	31 05       	cpc	r19, r1
 2ca:	59 f7       	brne	.-42     	; 0x2a2 <sensor_state_machine+0xe2>
 2cc:	08 95       	ret

000002ce <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
    uint8_t low, high;
    low = ADCL;
 2e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    high = ADCH;
 2e6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 2ea:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current_channel>
 2ee:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <current_channel+0x1>
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	e2 5f       	subi	r30, 0xF2	; 242
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	92 2b       	or	r25, r18
 2fe:	91 83       	std	Z+1, r25	; 0x01
 300:	80 83       	st	Z, r24
    adc_finished = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <adc_finished>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <spi_init>:
void
spi_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    SPI_DIR &= ~(_BV(MOSI)|_BV(SCK)|_BV(CS));
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	83 7d       	andi	r24, 0xD3	; 211
 320:	84 b9       	out	0x04, r24	; 4

    // set pullups on input pins
    SPI_PORT |= (_BV(MOSI)|_BV(SCK)|_BV(CS));
 322:	85 b1       	in	r24, 0x05	; 5
 324:	8c 62       	ori	r24, 0x2C	; 44
 326:	85 b9       	out	0x05, r24	; 5

    // PORTB setup PINS for output
    SPI_DIR |= _BV(MISO);
 328:	24 9a       	sbi	0x04, 4	; 4

    // EEPROM to input, no pullup
    EEPROM_DIR &= ~_BV(EEPROM);
 32a:	27 98       	cbi	0x04, 7	; 4
    
    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	8c bd       	out	0x2c, r24	; 44
 330:	08 95       	ret

00000332 <spi_pre_power_down>:

void
spi_pre_power_down(void)
{
    // shutdown modules
    PRR |= _BV(PRSPI);
 332:	e4 e6       	ldi	r30, 0x64	; 100
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    SPI_DIR &= ~(_BV(MISO));
 33c:	24 98       	cbi	0x04, 4	; 4
    SPI_PORT |= _BV(MISO);
 33e:	2c 9a       	sbi	0x05, 4	; 5
 340:	08 95       	ret

00000342 <spi_post_power_down>:

void
spi_post_power_down(void)
{
    // MISO to output, pull-up off
    SPI_PORT &= ~(_BV(MISO));
 342:	2c 98       	cbi	0x05, 4	; 5
    SPI_DIR |= _BV(MISO);
 344:	24 9a       	sbi	0x04, 4	; 4

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 346:	e4 e6       	ldi	r30, 0x64	; 100
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8b 7f       	andi	r24, 0xFB	; 251
 34e:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 350:	80 ec       	ldi	r24, 0xC0	; 192
 352:	8c bd       	out	0x2c, r24	; 44
 354:	08 95       	ret

00000356 <spi_state_machine>:

void
spi_state_machine(void)
{
    // toggle eeprom if chosen
    if (toggle_eeprom)
 356:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <toggle_eeprom>
 35a:	88 23       	and	r24, r24
 35c:	51 f0       	breq	.+20     	; 0x372 <spi_state_machine+0x1c>
    {
        if (bit_is_clear(EEPROM_PIN, EEPROM))
 35e:	1f 99       	sbic	0x03, 7	; 3
 360:	02 c0       	rjmp	.+4      	; 0x366 <spi_state_machine+0x10>
        {
            // set to input
            EEPROM_DIR &= ~_BV(EEPROM);
 362:	27 98       	cbi	0x04, 7	; 4
 364:	04 c0       	rjmp	.+8      	; 0x36e <spi_state_machine+0x18>
        } else {
            // set to output, set low
            EEPROM_DIR |= _BV(EEPROM);
 366:	27 9a       	sbi	0x04, 7	; 4
            EEPROM_PORT &= _BV(EEPROM);
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	80 78       	andi	r24, 0x80	; 128
 36c:	85 b9       	out	0x05, r24	; 5
        }
        toggle_eeprom = 0;
 36e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <toggle_eeprom>
 372:	08 95       	ret

00000374 <__vector_17>:
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
 386:	ee b5       	in	r30, 0x2e	; 46
 388:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <spi_state.1655>
 38c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <spi_state.1655+0x1>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	89 f1       	breq	.+98     	; 0x3f8 <__vector_17+0x84>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	91 05       	cpc	r25, r1
 39a:	f1 f1       	breq	.+124    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 39c:	89 2b       	or	r24, r25
 39e:	09 f0       	breq	.+2      	; 0x3a2 <__vector_17+0x2e>
 3a0:	40 c0       	rjmp	.+128    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3a2:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <addr.1654>
 3a6:	80 ef       	ldi	r24, 0xF0	; 240
 3a8:	8e 0f       	add	r24, r30
 3aa:	86 30       	cpi	r24, 0x06	; 6
 3ac:	90 f4       	brcc	.+36     	; 0x3d2 <__vector_17+0x5e>
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e2 51       	subi	r30, 0x12	; 18
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	80 81       	ld	r24, Z
 3ba:	8e bd       	out	0x2e, r24	; 46
 3bc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <addr.1654>
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	e2 51       	subi	r30, 0x12	; 18
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	81 81       	ldd	r24, Z+1	; 0x01
 3cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <__vector_17+0x7e>
 3d2:	e2 30       	cpi	r30, 0x02	; 2
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <__vector_17+0x6e>
 3d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_channels>
 3da:	8e bd       	out	0x2e, r24	; 46
 3dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__vector_17+0x7e>
 3e2:	e3 30       	cpi	r30, 0x03	; 3
 3e4:	31 f4       	brne	.+12     	; 0x3f2 <__vector_17+0x7e>
 3e6:	1e bc       	out	0x2e, r1	; 46
 3e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <toggle_eeprom>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0b c0       	rjmp	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fc:	8e bd       	out	0x2e, r24	; 46
 3fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <addr.1654>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	11 f4       	brne	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <adc_channels>
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <spi_state.1655+0x1>
 412:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <spi_state.1655>
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	1e bc       	out	0x2e, r1	; 46
 41a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spi_state.1655+0x1>
 41e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <spi_state.1655>
 422:	28 9b       	sbis	0x05, 0	; 5
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	28 98       	cbi	0x05, 0	; 5
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	28 9a       	sbi	0x05, 0	; 5
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <main>:
{
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    init();
 43e:	0e 94 55 00 	call	0xaa	; 0xaa <init>
    
    machine_state = Start;
 442:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <machine_state>
    button_mask = 0xFF;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_mask>
    
	// start interrupts
	sei();
 44c:	78 94       	sei
    // main loop
    while(1)
    {
        // check if button down, mask length is 66ms
        if (button_state == 0 && button_mask == 0x00) {
            button_state = 1;
 44e:	c1 e0       	ldi	r28, 0x01	; 1

            // do the power down
            sleep_enable();
            sleep_mode();
            // woken up
            machine_state = SleepPowerUp;
 450:	1c e0       	ldi	r17, 0x0C	; 12
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            ENABLE_SET_OFF;
            machine_state = SleepPowerDown;
 452:	0b e0       	ldi	r16, 0x0B	; 11
            break;
        case SignaledOff:
            if (!mcu_is_running())
            {
                SHUTDOWN_SET_ON;
                machine_state = MCUOff;
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	f8 2e       	mov	r15, r24
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED3_SET_OFF;
#endif
            SHUTDOWN_SET_OFF;
            machine_state = SignaledOff;
 458:	98 e0       	ldi	r25, 0x08	; 8
 45a:	e9 2e       	mov	r14, r25
        case MCURunning:
            if (button_pressed())
                machine_state = SignaledOffEntry;
            // if turned off via the desktop
            if (!mcu_is_running())
                machine_state = MCUOffEntry;
 45c:	d9 e0       	ldi	r29, 0x09	; 9
#endif
            machine_state = MCURunning;
            break;
        case MCURunning:
            if (button_pressed())
                machine_state = SignaledOffEntry;
 45e:	27 e0       	ldi	r18, 0x07	; 7
 460:	d2 2e       	mov	r13, r18
            LED3_SET_ON;
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED4_SET_OFF;
#endif
            machine_state = MCURunning;
 462:	36 e0       	ldi	r19, 0x06	; 6
 464:	c3 2e       	mov	r12, r19
            ENABLE_SET_ON;
            machine_state = SignaledOn;
            break;
        case SignaledOn:
            if (mcu_is_running())
                machine_state = MCURunningEntry;
 466:	45 e0       	ldi	r20, 0x05	; 5
 468:	b4 2e       	mov	r11, r20
            LED2_SET_ON;
            LED1_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            wakeup_timer = -1;
 46a:	aa 24       	eor	r10, r10
 46c:	aa 94       	dec	r10
            ENABLE_SET_ON;
            machine_state = SignaledOn;
 46e:	54 e0       	ldi	r21, 0x04	; 4
 470:	95 2e       	mov	r9, r21
            SHUTDOWN_SET_ON;
            machine_state = Wait;
            break;
        case Wait:
            if (button_pressed())
                machine_state = SignaledOnEntry;
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	86 2e       	mov	r8, r22
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            ENABLE_SET_OFF;
            SHUTDOWN_SET_ON;
            machine_state = Wait;
 476:	72 e0       	ldi	r23, 0x02	; 2
 478:	77 2e       	mov	r7, r23

    // main loop
    while(1)
    {
        // check if button down, mask length is 66ms
        if (button_state == 0 && button_mask == 0x00) {
 47a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <button_state>
 47e:	81 11       	cpse	r24, r1
 480:	09 c0       	rjmp	.+18     	; 0x494 <main+0x56>
 482:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_mask>
 486:	81 11       	cpse	r24, r1
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <main+0x72>
            button_state = 1;
 48a:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <button_state>
            tovflows = 0;
 48e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tovflows>
 492:	0e c0       	rjmp	.+28     	; 0x4b0 <main+0x72>
            // has it been down for long enough
        } else if (button_state == 1) {
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	61 f4       	brne	.+24     	; 0x4b0 <main+0x72>
            if (button_mask == 0x0FF) {
 498:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <button_mask>
 49c:	9f 3f       	cpi	r25, 0xFF	; 255
 49e:	41 f4       	brne	.+16     	; 0x4b0 <main+0x72>
                // delay long enough, each overflow 122Hz (8ms), this is 200ms
                if (tovflows >= (F_CPU/256/256/5)) {
 4a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tovflows>
 4a4:	98 31       	cpi	r25, 0x18	; 24
 4a6:	10 f0       	brcs	.+4      	; 0x4ac <main+0x6e>
                    buttonpress = 1;
 4a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buttonpress>
                }
                button_state = 0;
 4ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <button_state>
            }
        }
        
        switch (machine_state) {
 4b0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <machine_state>
 4b4:	8e 2f       	mov	r24, r30
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	8d 30       	cpi	r24, 0x0D	; 13
 4ba:	91 05       	cpc	r25, r1
 4bc:	08 f0       	brcs	.+2      	; 0x4c0 <main+0x82>
 4be:	83 c0       	rjmp	.+262    	; 0x5c6 <main+0x188>
 4c0:	fc 01       	movw	r30, r24
 4c2:	ec 5c       	subi	r30, 0xCC	; 204
 4c4:	ff 4f       	sbci	r31, 0xFF	; 255
 4c6:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__tablejump2__>
            wakeup_timer = 0;
            machine_state = WaitEntry;
            break;
        case WaitEntry:
#ifdef USE_LED
            LED1_SET_ON;
 4ca:	2f 9a       	sbi	0x05, 7	; 5
            LED2_SET_OFF;
 4cc:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 4ce:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 4d0:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 4d2:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_ON;
 4d4:	2e 9a       	sbi	0x05, 6	; 5
            machine_state = Wait;
 4d6:	70 92 09 01 	sts	0x0109, r7	; 0x800109 <machine_state>
            break;
 4da:	77 c0       	rjmp	.+238    	; 0x5ca <main+0x18c>

// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 4dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 4e0:	88 23       	and	r24, r24
 4e2:	21 f0       	breq	.+8      	; 0x4ec <main+0xae>
        buttonpress = 0;
 4e4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
            SHUTDOWN_SET_ON;
            machine_state = Wait;
            break;
        case Wait:
            if (button_pressed())
                machine_state = SignaledOnEntry;
 4e8:	80 92 09 01 	sts	0x0109, r8	; 0x800109 <machine_state>
// trigger when the wake up period is over
inline
int wake_up_expired(void)
{
    // this is 750ms
    if (wakeup_timer >= (uint8_t)(F_CPU/256/256/1.5))
 4ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 4f0:	81 35       	cpi	r24, 0x51	; 81
 4f2:	38 f5       	brcc	.+78     	; 0x542 <main+0x104>
 4f4:	6a c0       	rjmp	.+212    	; 0x5ca <main+0x18c>
            if (wake_up_expired())
                machine_state = MCUOffEntry;
            break;
        case SignaledOnEntry:
#ifdef USE_LED
            LED2_SET_ON;
 4f6:	5d 9a       	sbi	0x0b, 5	; 11
            LED1_SET_OFF;
 4f8:	2f 98       	cbi	0x05, 7	; 5
            LED3_SET_OFF;
 4fa:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 4fc:	5f 98       	cbi	0x0b, 7	; 11
#endif
            wakeup_timer = -1;
 4fe:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <wakeup_timer>
            ENABLE_SET_ON;
 502:	5c 9a       	sbi	0x0b, 4	; 11
            machine_state = SignaledOn;
 504:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <machine_state>
            break;
 508:	60 c0       	rjmp	.+192    	; 0x5ca <main+0x18c>
        case SignaledOn:
            if (mcu_is_running())
 50a:	4b 99       	sbic	0x09, 3	; 9
                machine_state = MCURunningEntry;
 50c:	b0 92 09 01 	sts	0x0109, r11	; 0x800109 <machine_state>

// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 510:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <main+0xdc>
 518:	58 c0       	rjmp	.+176    	; 0x5ca <main+0x18c>
        buttonpress = 0;
 51a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
 51e:	11 c0       	rjmp	.+34     	; 0x542 <main+0x104>
            if (button_pressed())
                machine_state = MCUOffEntry;
            break;
        case MCURunningEntry:
#ifdef USE_LED
            LED3_SET_ON;
 520:	5e 9a       	sbi	0x0b, 6	; 11
            LED1_SET_OFF;
 522:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 524:	5d 98       	cbi	0x0b, 5	; 11
            LED4_SET_OFF;
 526:	5f 98       	cbi	0x0b, 7	; 11
#endif
            machine_state = MCURunning;
 528:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <machine_state>
            break;
 52c:	4e c0       	rjmp	.+156    	; 0x5ca <main+0x18c>

// trigger when button pressed and released
inline
int button_pressed(void)
{
    if (buttonpress) {
 52e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buttonpress>
 532:	88 23       	and	r24, r24
 534:	21 f0       	breq	.+8      	; 0x53e <main+0x100>
        buttonpress = 0;
 536:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <buttonpress>
#endif
            machine_state = MCURunning;
            break;
        case MCURunning:
            if (button_pressed())
                machine_state = SignaledOffEntry;
 53a:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <machine_state>
            // if turned off via the desktop
            if (!mcu_is_running())
 53e:	4b 99       	sbic	0x09, 3	; 9
 540:	44 c0       	rjmp	.+136    	; 0x5ca <main+0x18c>
                machine_state = MCUOffEntry;
 542:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <machine_state>
 546:	41 c0       	rjmp	.+130    	; 0x5ca <main+0x18c>
            break;
        case SignaledOffEntry:
#ifdef USE_LED
            LED4_SET_ON;
 548:	5f 9a       	sbi	0x0b, 7	; 11
            LED1_SET_OFF;
 54a:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 54c:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 54e:	5e 98       	cbi	0x0b, 6	; 11
#endif
            SHUTDOWN_SET_OFF;
 550:	2e 98       	cbi	0x05, 6	; 5
            machine_state = SignaledOff;
 552:	e0 92 09 01 	sts	0x0109, r14	; 0x800109 <machine_state>
            break;
 556:	39 c0       	rjmp	.+114    	; 0x5ca <main+0x18c>
        case SignaledOff:
            if (!mcu_is_running())
 558:	4b 99       	sbic	0x09, 3	; 9
 55a:	37 c0       	rjmp	.+110    	; 0x5ca <main+0x18c>
            {
                SHUTDOWN_SET_ON;
 55c:	2e 9a       	sbi	0x05, 6	; 5
                machine_state = MCUOff;
 55e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <machine_state>
 562:	33 c0       	rjmp	.+102    	; 0x5ca <main+0x18c>
            }
            break;
        case MCUOffEntry: case MCUOff:
#ifdef USE_LED
            LED1_SET_OFF;
 564:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 566:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 568:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 56a:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 56c:	5c 98       	cbi	0x0b, 4	; 11
            machine_state = SleepPowerDown;
 56e:	00 93 09 01 	sts	0x0109, r16	; 0x800109 <machine_state>
            break;
 572:	2b c0       	rjmp	.+86     	; 0x5ca <main+0x18c>
        case SleepPowerDown:
#ifdef USE_LED
            LED1_SET_OFF;
 574:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 576:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 578:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 57a:	5f 98       	cbi	0x0b, 7	; 11
            LED5_SET_OFF;
 57c:	28 98       	cbi	0x05, 0	; 5
            LED6_SET_OFF;
 57e:	29 98       	cbi	0x05, 1	; 5
#endif
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 580:	83 b7       	in	r24, 0x33	; 51
 582:	81 7f       	andi	r24, 0xF1	; 241
 584:	84 60       	ori	r24, 0x04	; 4
 586:	83 bf       	out	0x33, r24	; 51

            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 588:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 58a:	2e 9a       	sbi	0x05, 6	; 5
            sensor_pre_power_down();
 58c:	0e 94 c1 00 	call	0x182	; 0x182 <sensor_pre_power_down>
            spi_pre_power_down();
 590:	0e 94 99 01 	call	0x332	; 0x332 <spi_pre_power_down>
            
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 594:	e8 9a       	sbi	0x1d, 0	; 29

            // do the power down
            sleep_enable();
 596:	83 b7       	in	r24, 0x33	; 51
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	83 bf       	out	0x33, r24	; 51
 5a2:	88 95       	sleep
 5a4:	83 b7       	in	r24, 0x33	; 51
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	83 bf       	out	0x33, r24	; 51
            // woken up
            machine_state = SleepPowerUp;
 5aa:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <machine_state>
            // NO BREAK
            // fall through to next state, so we don't
            // call other state machines
        case SleepPowerUp:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 5ae:	e8 98       	cbi	0x1d, 0	; 29
            spi_post_power_down();
 5b0:	0e 94 a1 01 	call	0x342	; 0x342 <spi_post_power_down>
            sensor_post_power_down();
 5b4:	0e 94 cc 00 	call	0x198	; 0x198 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 5b8:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 5ba:	26 9a       	sbi	0x04, 6	; 4
            wakeup_timer = 0;
 5bc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wakeup_timer>
            machine_state = WaitEntry;
 5c0:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <machine_state>
            break;
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <main+0x18c>
        default:
            machine_state = Start;
 5c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <machine_state>
        }
        spi_state_machine();
 5ca:	0e 94 ab 01 	call	0x356	; 0x356 <spi_state_machine>
        sensor_state_machine();
 5ce:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sensor_state_machine>
    }
 5d2:	53 cf       	rjmp	.-346    	; 0x47a <main+0x3c>

000005d4 <__tablejump2__>:
 5d4:	ee 0f       	add	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	05 90       	lpm	r0, Z+
 5da:	f4 91       	lpm	r31, Z
 5dc:	e0 2d       	mov	r30, r0
 5de:	09 94       	ijmp

000005e0 <_exit>:
 5e0:	f8 94       	cli

000005e2 <__stop_program>:
 5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <__stop_program>
