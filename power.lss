
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006ae  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  00000742  2**0
                  ALLOC
  3 .noinit       00000001  00800121  00800121  00000742  2**0
                  ALLOC
  4 .stab         00001950  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000105b  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003100  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00003cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_16>
  44:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_17>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_21>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	a7 00       	.word	0x00a7	; ????
  6a:	a5 00       	.word	0x00a5	; ????
  6c:	a7 00       	.word	0x00a7	; ????
  6e:	a7 00       	.word	0x00a7	; ????
  70:	a7 00       	.word	0x00a7	; ????
  72:	a5 00       	.word	0x00a5	; ????
  74:	a7 00       	.word	0x00a7	; ????
  76:	a5 00       	.word	0x00a5	; ????
  78:	a7 00       	.word	0x00a7	; ????
  7a:	a5 00       	.word	0x00a5	; ????
  7c:	a7 00       	.word	0x00a7	; ????
  7e:	a5 00       	.word	0x00a5	; ????
  80:	a5 00       	.word	0x00a5	; ????
  82:	a5 00       	.word	0x00a5	; ????
  84:	a7 00       	.word	0x00a7	; ????
  86:	39 03       	fmul	r19, r17
  88:	7c 02       	muls	r23, r28
  8a:	80 02       	muls	r24, r16
  8c:	8d 02       	muls	r24, r29
  8e:	91 02       	muls	r25, r17
  90:	b6 02       	muls	r27, r22
  92:	bb 02       	muls	r27, r27
  94:	c6 02       	muls	r28, r22
  96:	ca 02       	muls	r28, r26
  98:	e0 02       	muls	r30, r16
  9a:	03 03       	mulsu	r16, r19
  9c:	0c 03       	fmul	r16, r20
  9e:	0f 03       	fmul	r16, r23
  a0:	13 03       	mulsu	r17, r19
  a2:	13 03       	mulsu	r17, r19
  a4:	16 03       	mulsu	r17, r22
  a6:	32 03       	mulsu	r19, r18

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <get_mcusr>:
  b4:	84 b7       	in	r24, 0x34	; 52
  b6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__bss_end>
  ba:	14 be       	out	0x34, r1	; 52
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	a8 95       	wdr
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	0f be       	out	0x3f, r0	; 63

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a1 32       	cpi	r26, 0x21	; 33
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
  e6:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <init>:

void
init(void)
{
    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
  ee:	e4 e6       	ldi	r30, 0x64	; 100
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8a 6c       	ori	r24, 0xCA	; 202
  f6:	80 83       	st	Z, r24
    
    // timer set to CK/256, overflow interrupt enabled
    TCCR0B = _BV(CS02);
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
 102:	53 98       	cbi	0x0a, 3	; 10

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
 104:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
 106:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
 108:	26 9a       	sbi	0x04, 6	; 4
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1));
    PORTD |= (_BV(0)|_BV(1));
#else
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1)|_BV(5)|_BV(6)|_BV(7));
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 71       	andi	r24, 0x1C	; 28
 10e:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (_BV(0)|_BV(1)|_BV(5)|_BV(6)|_BV(7));
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	83 6e       	ori	r24, 0xE3	; 227
 114:	8b b9       	out	0x0b, r24	; 11
    DDRB &= ~(_BV(0)|_BV(1));
 116:	84 b1       	in	r24, 0x04	; 4
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	84 b9       	out	0x04, r24	; 4
    PORTB |= (_BV(0)|_BV(1));
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	85 b9       	out	0x05, r24	; 5
#endif
    
    // enable inactive is low
    ENABLE_SET_OFF;
 122:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown inactive is low
    SHUTDOWN_SET_OFF;
 124:	2e 98       	cbi	0x05, 6	; 5

    // the other components
    sensor_init();
 126:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <sensor_init>
    spi_init();
 12a:	0c 94 cc 01 	jmp	0x398	; 0x398 <spi_init>

0000012e <change_state>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 12e:	f8 94       	cli
// change state
void
change_state(StateMachine new_state)
{
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        switch (machine_state) {
 130:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <machine_state>
 134:	49 2f       	mov	r20, r25
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	fa 01       	movw	r30, r20
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	ef 30       	cpi	r30, 0x0F	; 15
 13e:	f1 05       	cpc	r31, r1
 140:	20 f4       	brcc	.+8      	; 0x14a <change_state+0x1c>
 142:	ec 5c       	subi	r30, 0xCC	; 204
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__tablejump2__>
        case PowerDownEntry:
        case ButtonPress:
        case ButtonRelease:
            break;
        default:
            prev_state = machine_state;
 14a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <prev_state>
        }
        machine_state = new_state;
 14e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <machine_state>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 152:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 154:	08 95       	ret

00000156 <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
    button_mask <<= 1;
 162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 166:	88 0f       	add	r24, r24
 168:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (BUTTON_ON)
 16c:	4a 9b       	sbis	0x09, 2	; 9
 16e:	04 c0       	rjmp	.+8      	; 0x178 <__vector_16+0x22>
        button_mask |= 1;
 170:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 174:	81 60       	ori	r24, 0x01	; 1
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_16+0x28>
    else
        button_mask &= ~1;
 178:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (button_timer >= 0)
 182:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 186:	87 fd       	sbrc	r24, 7
 188:	05 c0       	rjmp	.+10     	; 0x194 <__vector_16+0x3e>
        button_timer++;
 18a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    if (wakeup_timer >= 0)
 194:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 198:	87 fd       	sbrc	r24, 7
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <__vector_16+0x50>
        wakeup_timer++;
 19c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    if (idle_timer >= 0)
 1a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1aa:	87 fd       	sbrc	r24, 7
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_16+0x62>
        idle_timer++;
 1ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
#ifdef USE_LED
    TOGGLE_LED6;
#endif
}
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
    int0_event = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <int0_event>
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <sensor_init>:

void
sensor_init(void)
{
    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1e2:	87 b1       	in	r24, 0x07	; 7
 1e4:	80 7c       	andi	r24, 0xC0	; 192
 1e6:	87 b9       	out	0x07, r24	; 7

    // turn off analog comparator
    ACSR |= _BV(ACD);
 1e8:	80 b7       	in	r24, 0x30	; 48
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	80 bf       	out	0x30, r24	; 48
    
    // start the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 1ee:	8b e8       	ldi	r24, 0x8B	; 139
 1f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    // at start, no channels are in use
    current_channel = -1;       /* channel currently measured */
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 1fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
 200:	08 95       	ret

00000202 <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 202:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= _BV(PRADC);
 206:	e4 e6       	ldi	r30, 0x64	; 100
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 210:	88 b1       	in	r24, 0x08	; 8
 212:	8f 63       	ori	r24, 0x3F	; 63
 214:	88 b9       	out	0x08, r24	; 8
 216:	08 95       	ret

00000218 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // startup adc
    PRR &= ~(_BV(PRADC));
 218:	e4 e6       	ldi	r30, 0x64	; 100
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 83       	st	Z, r24
    // initialize the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 222:	8b e8       	ldi	r24, 0x8B	; 139
 224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 230:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    
    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 234:	88 b1       	in	r24, 0x08	; 8
 236:	80 7c       	andi	r24, 0xC0	; 192
 238:	88 b9       	out	0x08, r24	; 8
 23a:	08 95       	ret

0000023c <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 23c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_channels>
    if (curchannels > 0 && current_channel < 0)
 240:	88 23       	and	r24, r24
 242:	41 f1       	breq	.+80     	; 0x294 <sensor_state_machine+0x58>
 244:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 248:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <current_channel+0x1>
 24c:	37 ff       	sbrs	r19, 7
 24e:	22 c0       	rjmp	.+68     	; 0x294 <sensor_state_machine+0x58>
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & (1<<i))
 254:	48 2f       	mov	r20, r24
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	ba 01       	movw	r22, r20
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <sensor_state_machine+0x26>
 25e:	75 95       	asr	r23
 260:	67 95       	ror	r22
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <sensor_state_machine+0x22>
 266:	60 ff       	sbrs	r22, 0
 268:	07 c0       	rjmp	.+14     	; 0x278 <sensor_state_machine+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 26a:	f8 94       	cli
            {
                ATOMIC_BLOCK(ATOMIC_FORCEON) {
                    current_channel = i;
 26c:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <current_channel>
 270:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <current_channel+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 274:	78 94       	sei
                }
                break;
 276:	05 c0       	rjmp	.+10     	; 0x282 <sensor_state_machine+0x46>
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
    if (curchannels > 0 && current_channel < 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 27c:	28 30       	cpi	r18, 0x08	; 8
 27e:	31 05       	cpc	r19, r1
 280:	59 f7       	brne	.-42     	; 0x258 <sensor_state_machine+0x1c>
                    current_channel = i;
                }
                break;
            }
        }
        ADMUX = current_channel;
 282:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_channel>
 286:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

        // start a new conversion
        ADCSRA |= _BV(ADSC);
 28a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 28e:	90 64       	ori	r25, 0x40	; 64
 290:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 294:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <adc_complete_event>
 298:	99 23       	and	r25, r25
 29a:	d1 f1       	breq	.+116    	; 0x310 <sensor_state_machine+0xd4>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 29c:	81 11       	cpse	r24, r1
 29e:	09 c0       	rjmp	.+18     	; 0x2b2 <sensor_state_machine+0x76>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2a0:	f8 94       	cli
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                current_channel = -1;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
 2a6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 2aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2ae:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 2b0:	2c c0       	rjmp	.+88     	; 0x30a <sensor_state_machine+0xce>
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
 2b2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & (1<<i)) {
 2b8:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 2ba:	28 30       	cpi	r18, 0x08	; 8
 2bc:	20 f5       	brcc	.+72     	; 0x306 <sensor_state_machine+0xca>
            {
                if (curchannels & (1<<i)) {
 2be:	42 2f       	mov	r20, r18
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	bc 01       	movw	r22, r24
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <sensor_state_machine+0x90>
 2c8:	75 95       	asr	r23
 2ca:	67 95       	ror	r22
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <sensor_state_machine+0x8c>
 2d0:	60 ff       	sbrs	r22, 0
 2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <sensor_state_machine+0xb8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d4:	f8 94       	cli
                    ATOMIC_BLOCK(ATOMIC_FORCEON) {
                        current_channel = i;
 2d6:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <current_channel+0x1>
 2da:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2de:	78 94       	sei
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion
            ADMUX = current_channel;
 2e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 2e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
            ADCSRA |= _BV(ADSC);
 2e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2f2:	0b c0       	rjmp	.+22     	; 0x30a <sensor_state_machine+0xce>
                        current_channel = i;
                    }
                    break;
                } else
                    // zero out channels not used
                    adc_values[i] = 0;
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	fa 01       	movw	r30, r20
 2fa:	e1 5f       	subi	r30, 0xF1	; 241
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	11 82       	std	Z+1, r1	; 0x01
 300:	10 82       	st	Z, r1
                ++i;
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	da cf       	rjmp	.-76     	; 0x2ba <sensor_state_machine+0x7e>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	da cf       	rjmp	.-76     	; 0x2be <sensor_state_machine+0x82>
            }
            // start new conversion
            ADMUX = current_channel;
            ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
 30a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <adc_complete_event>
 30e:	08 95       	ret
 310:	ef e0       	ldi	r30, 0x0F	; 15
 312:	f1 e0       	ldi	r31, 0x01	; 1
        // start a new conversion
        ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & (1 << i)) != (1 << i))
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	ab 01       	movw	r20, r22
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <sensor_state_machine+0xec>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <sensor_state_machine+0xe8>
 32c:	dc 01       	movw	r26, r24
 32e:	a4 23       	and	r26, r20
 330:	b5 23       	and	r27, r21
 332:	4a 17       	cp	r20, r26
 334:	5b 07       	cpc	r21, r27
 336:	11 f0       	breq	.+4      	; 0x33c <sensor_state_machine+0x100>
                adc_values[i] = 0;
 338:	11 82       	std	Z+1, r1	; 0x01
 33a:	10 82       	st	Z, r1
            ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	32 96       	adiw	r30, 0x02	; 2
 342:	28 30       	cpi	r18, 0x08	; 8
 344:	31 05       	cpc	r19, r1
 346:	59 f7       	brne	.-42     	; 0x31e <sensor_state_machine+0xe2>
 348:	08 95       	ret

0000034a <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
    uint8_t low, high;
    low = ADCL;
 35e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    high = ADCH;
 362:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 366:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current_channel>
 36a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <current_channel+0x1>
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e1 5f       	subi	r30, 0xF1	; 241
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	92 2b       	or	r25, r18
 37a:	91 83       	std	Z+1, r25	; 0x01
 37c:	80 83       	st	Z, r24
    adc_complete_event = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_complete_event>
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <spi_init>:
void
spi_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    SPI_DIR &= ~(_BV(MOSI)|_BV(SCK)|_BV(CS));
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	83 7d       	andi	r24, 0xD3	; 211
 39c:	84 b9       	out	0x04, r24	; 4

    // set pullups on input pins
    SPI_PORT |= (_BV(MOSI)|_BV(SCK)|_BV(CS));
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	8c 62       	ori	r24, 0x2C	; 44
 3a2:	85 b9       	out	0x05, r24	; 5

    // PORTB setup PINS for output
    SPI_DIR |= _BV(MISO);
 3a4:	24 9a       	sbi	0x04, 4	; 4

    // EEPROM to input, no pullup
    EEPROM_DIR &= ~_BV(EEPROM);
 3a6:	27 98       	cbi	0x04, 7	; 4
    
    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 3a8:	80 ec       	ldi	r24, 0xC0	; 192
 3aa:	8c bd       	out	0x2c, r24	; 44
 3ac:	08 95       	ret

000003ae <spi_pre_power_down>:

void
spi_pre_power_down(void)
{
    // shutdown modules
    PRR |= _BV(PRSPI);
 3ae:	e4 e6       	ldi	r30, 0x64	; 100
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    SPI_DIR &= ~(_BV(MISO));
 3b8:	24 98       	cbi	0x04, 4	; 4
    SPI_PORT |= _BV(MISO);
 3ba:	2c 9a       	sbi	0x05, 4	; 5
 3bc:	08 95       	ret

000003be <spi_post_power_down>:

void
spi_post_power_down(void)
{
    // MISO to output, pull-up off
    SPI_PORT &= ~(_BV(MISO));
 3be:	2c 98       	cbi	0x05, 4	; 5
    SPI_DIR |= _BV(MISO);
 3c0:	24 9a       	sbi	0x04, 4	; 4

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 3c2:	e4 e6       	ldi	r30, 0x64	; 100
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	8b 7f       	andi	r24, 0xFB	; 251
 3ca:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 3cc:	80 ec       	ldi	r24, 0xC0	; 192
 3ce:	8c bd       	out	0x2c, r24	; 44
 3d0:	08 95       	ret

000003d2 <spi_state_machine>:

void
spi_state_machine(void)
{
    // toggle eeprom if chosen
    if (toggle_eeprom)
 3d2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <toggle_eeprom>
 3d6:	88 23       	and	r24, r24
 3d8:	51 f0       	breq	.+20     	; 0x3ee <spi_state_machine+0x1c>
    {
        if (bit_is_clear(EEPROM_PIN, EEPROM))
 3da:	1f 99       	sbic	0x03, 7	; 3
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <spi_state_machine+0x10>
        {
            // set to input
            EEPROM_DIR &= ~_BV(EEPROM);
 3de:	27 98       	cbi	0x04, 7	; 4
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <spi_state_machine+0x18>
        } else {
            // set to output, set low
            EEPROM_DIR |= _BV(EEPROM);
 3e2:	27 9a       	sbi	0x04, 7	; 4
            EEPROM_PORT &= _BV(EEPROM);
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	80 78       	andi	r24, 0x80	; 128
 3e8:	85 b9       	out	0x05, r24	; 5
        }
        toggle_eeprom = 0;
 3ea:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <toggle_eeprom>
    }
    // turn off interrupt flag
    spi_stc_event = 0;
 3ee:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <spi_stc_event>
 3f2:	08 95       	ret

000003f4 <__vector_17>:
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
 406:	ee b5       	in	r30, 0x2e	; 46
 408:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <spi_state.1658>
 40c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <spi_state.1658+0x1>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	91 05       	cpc	r25, r1
 414:	89 f1       	breq	.+98     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	91 05       	cpc	r25, r1
 41a:	f1 f1       	breq	.+124    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 41c:	89 2b       	or	r24, r25
 41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	40 c0       	rjmp	.+128    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 422:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <addr.1657>
 426:	80 ef       	ldi	r24, 0xF0	; 240
 428:	8e 0f       	add	r24, r30
 42a:	88 30       	cpi	r24, 0x08	; 8
 42c:	90 f4       	brcc	.+36     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	e1 51       	subi	r30, 0x11	; 17
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	80 81       	ld	r24, Z
 43a:	8e bd       	out	0x2e, r24	; 46
 43c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <addr.1657>
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e1 51       	subi	r30, 0x11	; 17
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	81 81       	ldd	r24, Z+1	; 0x01
 44c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 450:	10 c0       	rjmp	.+32     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 452:	e2 30       	cpi	r30, 0x02	; 2
 454:	31 f4       	brne	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 456:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_channels>
 45a:	8e bd       	out	0x2e, r24	; 46
 45c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 460:	08 c0       	rjmp	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 462:	e3 30       	cpi	r30, 0x03	; 3
 464:	31 f4       	brne	.+12     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 466:	1e bc       	out	0x2e, r1	; 46
 468:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <toggle_eeprom>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 47c:	8e bd       	out	0x2e, r24	; 46
 47e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <addr.1657>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	11 f4       	brne	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <adc_channels>
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <spi_state.1658+0x1>
 492:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <spi_state.1658>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 498:	1e bc       	out	0x2e, r1	; 46
 49a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spi_state.1658+0x1>
 49e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <spi_state.1658>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <spi_stc_event>
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <main>:
{
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    init();
 4ba:	0e 94 77 00 	call	0xee	; 0xee <init>
    
    machine_state = prev_state = Start;
 4be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <prev_state>
 4c2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <machine_state>
    button_mask = 0xFF;
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    wakeup_timer = -1;
 4cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    idle_timer = -1;
 4d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
    button_timer = -1;
 4d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    WakeupEvent evt = Unknown;
    
	// start interrupts
	sei();
 4d8:	78 94       	sei
    machine_state = prev_state = Start;
    button_mask = 0xFF;
    wakeup_timer = -1;
    idle_timer = -1;
    button_timer = -1;
    WakeupEvent evt = Unknown;
 4da:	d3 e0       	ldi	r29, 0x03	; 3
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
                idle_timer = -1;
 4dc:	cf ef       	ldi	r28, 0xFF	; 255

    // main loop
    while(1)
    {
/*--------------------------------------------------------*/
        switch (machine_state) {
 4de:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <machine_state>
 4e2:	8e 2f       	mov	r24, r30
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	81 31       	cpi	r24, 0x11	; 17
 4e8:	91 05       	cpc	r25, r1
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <main+0x34>
 4ec:	c6 c0       	rjmp	.+396    	; 0x67a <main+0x1c0>
 4ee:	fc 01       	movw	r30, r24
 4f0:	ed 5b       	subi	r30, 0xBD	; 189
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__tablejump2__>
            LED1_SET_ON;
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            ENABLE_SET_OFF;
 4f8:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_OFF;
 4fa:	2e 98       	cbi	0x05, 6	; 5
            change_state(Wait);
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	be c0       	rjmp	.+380    	; 0x67c <main+0x1c2>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 500:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            ENABLE_SET_OFF;
            SHUTDOWN_SET_OFF;
            change_state(Wait);
            break;
        case Wait:
            if (button_pressed())
 504:	81 11       	cpse	r24, r1
 506:	03 c0       	rjmp	.+6      	; 0x50e <main+0x54>
                change_state(ButtonPress);
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
// trigger when the wake up period is over
inline
int wake_up_expired(void)
{
    // this is 750ms
    if (wakeup_timer >= (uint8_t)(F_CPU/256/256/1.5))
 50e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 512:	81 35       	cpi	r24, 0x51	; 81
 514:	0c f0       	brlt	.+2      	; 0x518 <main+0x5e>
 516:	bb c0       	rjmp	.+374    	; 0x68e <main+0x1d4>
 518:	b3 c0       	rjmp	.+358    	; 0x680 <main+0x1c6>
            if (wake_up_expired())
                change_state(MCUOffEntry);
            break;
/*--------------------------------------------------------*/
        case ButtonPress:
            button_timer = 0;
 51a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <button_timer>
            change_state(ButtonRelease);
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	ad c0       	rjmp	.+346    	; 0x67c <main+0x1c2>
/*--------------------------------------------------------*/
// trigger when button released
inline
int button_released(void)
{
    return button_mask == 0xFF;
 522:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
        case ButtonPress:
            button_timer = 0;
            change_state(ButtonRelease);
            break;
        case ButtonRelease:
            if (button_released()) {
 526:	8f 3f       	cpi	r24, 0xFF	; 255
 528:	09 f0       	breq	.+2      	; 0x52c <main+0x72>
 52a:	aa c0       	rjmp	.+340    	; 0x680 <main+0x1c6>
                // is delay long enough, wait 200ms
                if (button_timer >= (F_CPU/256/256/5)) {
 52c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <button_timer>
 530:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prev_state>
 534:	98 31       	cpi	r25, 0x18	; 24
 536:	60 f0       	brcs	.+24     	; 0x550 <main+0x96>
                    if (prev_state == Wait)
 538:	82 30       	cpi	r24, 0x02	; 2
 53a:	11 f4       	brne	.+4      	; 0x540 <main+0x86>
                        change_state(SignaledOnEntry);
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	11 c0       	rjmp	.+34     	; 0x562 <main+0xa8>
                    else if (prev_state == SignaledOn)
 540:	86 30       	cpi	r24, 0x06	; 6
 542:	11 f4       	brne	.+4      	; 0x548 <main+0x8e>
                        change_state(MCUOffEntry);
 544:	8d e0       	ldi	r24, 0x0D	; 13
 546:	0d c0       	rjmp	.+26     	; 0x562 <main+0xa8>
                    else if (prev_state == MCURunning)
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	69 f4       	brne	.+26     	; 0x566 <main+0xac>
                        change_state(SignaledOffEntry);
 54c:	8b e0       	ldi	r24, 0x0B	; 11
 54e:	09 c0       	rjmp	.+18     	; 0x562 <main+0xa8>
                } else {
                    // delay too short
                    if (prev_state == Wait)
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	11 f4       	brne	.+4      	; 0x558 <main+0x9e>
                        change_state(WaitEntry);
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	05 c0       	rjmp	.+10     	; 0x562 <main+0xa8>
                    else if (prev_state == SignaledOn)
 558:	86 30       	cpi	r24, 0x06	; 6
 55a:	81 f3       	breq	.-32     	; 0x53c <main+0x82>
                        change_state(SignaledOnEntry);
                    else if (prev_state == MCURunning)
 55c:	88 30       	cpi	r24, 0x08	; 8
 55e:	19 f4       	brne	.+6      	; 0x566 <main+0xac>
                        change_state(MCURunningEntry);
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                }
                button_timer = -1;
 566:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <button_timer>
 56a:	8a c0       	rjmp	.+276    	; 0x680 <main+0x1c6>
            LED2_SET_ON;
            LED1_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            wakeup_timer = -1;
 56c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <wakeup_timer>
            ENABLE_SET_ON;
 570:	5c 9a       	sbi	0x0b, 4	; 11
            change_state(SignaledOn);
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	83 c0       	rjmp	.+262    	; 0x67c <main+0x1c2>
            break;
        case SignaledOn:
            if (mcu_is_running())
 576:	4b 9b       	sbis	0x09, 3	; 9
 578:	03 c0       	rjmp	.+6      	; 0x580 <main+0xc6>
                change_state(MCURunningEntry);
 57a:	87 e0       	ldi	r24, 0x07	; 7
 57c:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 580:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            change_state(SignaledOn);
            break;
        case SignaledOn:
            if (mcu_is_running())
                change_state(MCURunningEntry);
            if (button_pressed())
 584:	81 11       	cpse	r24, r1
 586:	7c c0       	rjmp	.+248    	; 0x680 <main+0x1c6>
                change_state(ButtonPress);
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	78 c0       	rjmp	.+240    	; 0x67c <main+0x1c2>
            LED3_SET_ON;
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED4_SET_OFF;
#endif
            idle_timer = 0;
 58c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <idle_timer>
            change_state(MCURunning);
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	74 c0       	rjmp	.+232    	; 0x67c <main+0x1c2>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 594:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
#endif
            idle_timer = 0;
            change_state(MCURunning);
            break;
        case MCURunning:
            if (button_pressed())
 598:	81 11       	cpse	r24, r1
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <main+0xec>
            {
                change_state(ButtonPress);
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 5a2:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
            }
            // if turned off via the desktop
            if (!mcu_is_running())
 5a6:	4b 99       	sbic	0x09, 3	; 9
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <main+0xfa>
            {
                change_state(MCUOffEntry);
 5aa:	8d e0       	ldi	r24, 0x0D	; 13
 5ac:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 5b0:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
// trigger when the idle period is over
inline
int idle_expired(void)
{
    // this is 375ms
    if (idle_timer >= (uint8_t)(F_CPU/256/256/3))
 5b4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 5b8:	88 32       	cpi	r24, 0x28	; 40
 5ba:	0c f0       	brlt	.+2      	; 0x5be <main+0x104>
 5bc:	6a c0       	rjmp	.+212    	; 0x692 <main+0x1d8>
 5be:	60 c0       	rjmp	.+192    	; 0x680 <main+0x1c6>
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 5c0:	e8 9a       	sbi	0x1d, 0	; 29
            // enter Idle mode
            set_sleep_mode(SLEEP_MODE_IDLE);
 5c2:	83 b7       	in	r24, 0x33	; 51
 5c4:	81 7f       	andi	r24, 0xF1	; 241
 5c6:	83 bf       	out	0x33, r24	; 51
            sleep_enable();
 5c8:	83 b7       	in	r24, 0x33	; 51
 5ca:	81 60       	ori	r24, 0x01	; 1
 5cc:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 5ce:	83 b7       	in	r24, 0x33	; 51
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	83 bf       	out	0x33, r24	; 51
 5d4:	88 95       	sleep
 5d6:	83 b7       	in	r24, 0x33	; 51
 5d8:	8e 7f       	andi	r24, 0xFE	; 254
 5da:	83 bf       	out	0x33, r24	; 51
// as these are in priority order, if a higher priority
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
 5dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 5e0:	81 11       	cpse	r24, r1
 5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <main+0x13e>
        return ButtonEvt;
    if (spi_stc_event)
 5e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <spi_stc_event>
 5e8:	81 11       	cpse	r24, r1
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <main+0x142>
        return SPItxfer;
    if (adc_complete_event)
 5ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_complete_event>
 5f0:	81 11       	cpse	r24, r1
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <main+0x146>
        return ADCcomplete;
    return Unknown;
 5f4:	d3 e0       	ldi	r29, 0x03	; 3
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <main+0x148>
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
        return ButtonEvt;
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <main+0x148>
    if (spi_stc_event)
        return SPItxfer;
 5fc:	d1 e0       	ldi	r29, 0x01	; 1
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <main+0x148>
    if (adc_complete_event)
        return ADCcomplete;
 600:	d2 e0       	ldi	r29, 0x02	; 2
            set_sleep_mode(SLEEP_MODE_IDLE);
            sleep_enable();
            sleep_mode();
            // get wakeup source
            evt = get_wakeup_event();
            change_state(IdleExit);
 602:	8a e0       	ldi	r24, 0x0A	; 10
 604:	3b c0       	rjmp	.+118    	; 0x67c <main+0x1c2>
            break;
        case IdleExit:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 606:	e8 98       	cbi	0x1d, 0	; 29
            if (evt == ButtonEvt || !mcu_is_running())
 608:	dd 23       	and	r29, r29
 60a:	11 f0       	breq	.+4      	; 0x610 <main+0x156>
 60c:	4b 99       	sbic	0x09, 3	; 9
 60e:	02 c0       	rjmp	.+4      	; 0x614 <main+0x15a>
                change_state(MCURunningEntry);
 610:	87 e0       	ldi	r24, 0x07	; 7
 612:	34 c0       	rjmp	.+104    	; 0x67c <main+0x1c2>
            else
                change_state(IdleEntry);
 614:	89 e0       	ldi	r24, 0x09	; 9
 616:	32 c0       	rjmp	.+100    	; 0x67c <main+0x1c2>
            LED4_SET_ON;
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED3_SET_OFF;
#endif
            SHUTDOWN_SET_ON;
 618:	2e 9a       	sbi	0x05, 6	; 5
            change_state(SignaledOff);
 61a:	8c e0       	ldi	r24, 0x0C	; 12
 61c:	2f c0       	rjmp	.+94     	; 0x67c <main+0x1c2>
            break;
        case SignaledOff:
            if (!mcu_is_running())
 61e:	4b 99       	sbic	0x09, 3	; 9
 620:	2f c0       	rjmp	.+94     	; 0x680 <main+0x1c6>
            {
                SHUTDOWN_SET_OFF;
 622:	2e 98       	cbi	0x05, 6	; 5
 624:	34 c0       	rjmp	.+104    	; 0x68e <main+0x1d4>
            LED1_SET_OFF;
            LED2_SET_OFF;
            LED3_SET_OFF;
            LED4_SET_OFF;
#endif
            ENABLE_SET_OFF;
 626:	5c 98       	cbi	0x0b, 4	; 11
            change_state(PowerDownEntry);
 628:	8f e0       	ldi	r24, 0x0F	; 15
 62a:	28 c0       	rjmp	.+80     	; 0x67c <main+0x1c2>
            LED4_SET_OFF;
            LED5_SET_OFF;
            LED6_SET_OFF;
#endif
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	81 7f       	andi	r24, 0xF1	; 241
 630:	84 60       	ori	r24, 0x04	; 4
 632:	83 bf       	out	0x33, r24	; 51

            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 634:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 636:	2e 9a       	sbi	0x05, 6	; 5

            // modules power off
            sensor_pre_power_down();
 638:	0e 94 01 01 	call	0x202	; 0x202 <sensor_pre_power_down>
            spi_pre_power_down();
 63c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <spi_pre_power_down>
            
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 640:	e8 9a       	sbi	0x1d, 0	; 29

            // do the power down, if no INT0 interrupt
            cli();
 642:	f8 94       	cli
            if (!int0_event) {
 644:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 648:	81 11       	cpse	r24, r1
 64a:	08 c0       	rjmp	.+16     	; 0x65c <main+0x1a2>
                sleep_enable();
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	83 bf       	out	0x33, r24	; 51
                sei();
 652:	78 94       	sei
                sleep_cpu();
 654:	88 95       	sleep
                sleep_disable();
 656:	83 b7       	in	r24, 0x33	; 51
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	83 bf       	out	0x33, r24	; 51
            }
            sei();
 65c:	78 94       	sei
            change_state(PowerDownExit);
 65e:	80 e1       	ldi	r24, 0x10	; 16
 660:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
            // NO BREAK, fall through to PowerDownExit
/*--------------------------------------------------------*/
        case PowerDownExit:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 664:	e8 98       	cbi	0x1d, 0	; 29
            
            spi_post_power_down();
 666:	0e 94 df 01 	call	0x3be	; 0x3be <spi_post_power_down>
            sensor_post_power_down();
 66a:	0e 94 0c 01 	call	0x218	; 0x218 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 66e:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 670:	26 9a       	sbi	0x04, 6	; 4
            wakeup_timer = 0;
 672:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wakeup_timer>
            change_state(WaitEntry);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	01 c0       	rjmp	.+2      	; 0x67c <main+0x1c2>
            break;
/*--------------------------------------------------------*/
        default:
            change_state(Start);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
        }
/*--------------------------------------------------------*/
        spi_state_machine();
 680:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <spi_state_machine>
        sensor_state_machine();
 684:	0e 94 1e 01 	call	0x23c	; 0x23c <sensor_state_machine>

        int0_event = 0;
 688:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <int0_event>
    }
 68c:	28 cf       	rjmp	.-432    	; 0x4de <main+0x24>
            break;
        case Wait:
            if (button_pressed())
                change_state(ButtonPress);
            if (wake_up_expired())
                change_state(MCUOffEntry);
 68e:	8d e0       	ldi	r24, 0x0D	; 13
 690:	f5 cf       	rjmp	.-22     	; 0x67c <main+0x1c2>
                change_state(MCUOffEntry);
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
 692:	89 e0       	ldi	r24, 0x09	; 9
 694:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 698:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
 69c:	f1 cf       	rjmp	.-30     	; 0x680 <main+0x1c6>

0000069e <__tablejump2__>:
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	05 90       	lpm	r0, Z+
 6a4:	f4 91       	lpm	r31, Z
 6a6:	e0 2d       	mov	r30, r0
 6a8:	09 94       	ijmp

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
