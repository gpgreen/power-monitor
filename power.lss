
power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000792  2**0
                  ALLOC
  3 .noinit       00000001  0080011d  0080011d  00000792  2**0
                  ALLOC
  4 .stab         00001b00  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000105b  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00003ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_16>
  44:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_17>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_21>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	a7 00       	.word	0x00a7	; ????
  6a:	a5 00       	.word	0x00a5	; ????
  6c:	a7 00       	.word	0x00a7	; ????
  6e:	a7 00       	.word	0x00a7	; ????
  70:	a7 00       	.word	0x00a7	; ????
  72:	a5 00       	.word	0x00a5	; ????
  74:	a7 00       	.word	0x00a7	; ????
  76:	a5 00       	.word	0x00a5	; ????
  78:	a7 00       	.word	0x00a7	; ????
  7a:	a5 00       	.word	0x00a5	; ????
  7c:	a7 00       	.word	0x00a7	; ????
  7e:	a5 00       	.word	0x00a5	; ????
  80:	a5 00       	.word	0x00a5	; ????
  82:	a5 00       	.word	0x00a5	; ????
  84:	a7 00       	.word	0x00a7	; ????
  86:	61 03       	mulsu	r22, r17
  88:	86 02       	muls	r24, r22
  8a:	8e 02       	muls	r24, r30
  8c:	9b 02       	muls	r25, r27
  8e:	9f 02       	muls	r25, r31
  90:	c4 02       	muls	r28, r20
  92:	cd 02       	muls	r28, r29
  94:	d8 02       	muls	r29, r24
  96:	e0 02       	muls	r30, r16
  98:	f6 02       	muls	r31, r22
  9a:	1d 03       	fmul	r17, r21
  9c:	26 03       	mulsu	r18, r22
  9e:	2d 03       	fmul	r18, r21
  a0:	31 03       	mulsu	r19, r17
  a2:	31 03       	mulsu	r19, r17
  a4:	38 03       	fmul	r19, r16
  a6:	5a 03       	fmul	r21, r18

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <get_mcusr>:
  b4:	84 b7       	in	r24, 0x34	; 52
  b6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__bss_end>
  ba:	14 be       	out	0x34, r1	; 52
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	a8 95       	wdr
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	0f be       	out	0x3f, r0	; 63

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	ad 31       	cpi	r26, 0x1D	; 29
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  e6:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <init>:

void
init(void)
{
    // turn off modules that aren't used
    PRR |= (_BV(PRTWI)|_BV(PRTIM2)|_BV(PRTIM1)|_BV(PRUSART0));
  ee:	e4 e6       	ldi	r30, 0x64	; 100
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8a 6c       	ori	r24, 0xCA	; 202
  f6:	80 83       	st	Z, r24
    
    // timer set to CK/256, overflow interrupt enabled
    TCCR0B = _BV(CS02);
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = _BV(TOIE0);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    // MCU_RUNNING, input, no pullup
    MCU_RUNNING_DIR &= ~(_BV(MCU_RUNNING));
 102:	53 98       	cbi	0x0a, 3	; 10

    // BUTTON, input, no pullup
    BUTTON_DIR &= ~(_BV(BUTTON));
 104:	52 98       	cbi	0x0a, 2	; 10

    // ENABLE, output, no pullup
    ENABLE_DIR |= _BV(ENABLE);
 106:	54 9a       	sbi	0x0a, 4	; 10

    // SHUTDOWN, output, no pullup
    SHUTDOWN_DIR |= _BV(SHUTDOWN);
 108:	26 9a       	sbi	0x04, 6	; 4

#ifdef USE_LED
    // PORTD setup PINS for output
    DDRD |= (_BV(LED2)|_BV(LED3)|_BV(LED4));
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	80 6e       	ori	r24, 0xE0	; 224
 10e:	8a b9       	out	0x0a, r24	; 10
    // PORTB setup PINS for output
    DDRB |= (_BV(LED1)|_BV(LED5)|_BV(LED6));
 110:	84 b1       	in	r24, 0x04	; 4
 112:	83 68       	ori	r24, 0x83	; 131
 114:	84 b9       	out	0x04, r24	; 4
    // set unused ports as input and pull-up on
    DDRD &= ~(_BV(0)|_BV(1));
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (_BV(0)|_BV(1));
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	8b b9       	out	0x0b, r24	; 11
    DDRB &= ~(_BV(0)|_BV(1));
    PORTB |= (_BV(0)|_BV(1));
#endif
    
    // enable inactive is low
    ENABLE_SET_OFF;
 122:	5c 98       	cbi	0x0b, 4	; 11

    // shutdown inactive is low
    SHUTDOWN_SET_OFF;
 124:	2e 98       	cbi	0x05, 6	; 5

    // the other components
    sensor_init();
 126:	0e 94 f6 00 	call	0x1ec	; 0x1ec <sensor_init>
    spi_init();
 12a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <spi_init>

0000012e <change_state>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 12e:	f8 94       	cli
// change state
void
change_state(StateMachine new_state)
{
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        switch (machine_state) {
 130:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <machine_state>
 134:	49 2f       	mov	r20, r25
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	fa 01       	movw	r30, r20
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	ef 30       	cpi	r30, 0x0F	; 15
 13e:	f1 05       	cpc	r31, r1
 140:	20 f4       	brcc	.+8      	; 0x14a <change_state+0x1c>
 142:	ec 5c       	subi	r30, 0xCC	; 204
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__tablejump2__>
        case PowerDownEntry:
        case ButtonPress:
        case ButtonRelease:
            break;
        default:
            prev_state = machine_state;
 14a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <prev_state>
        }
        machine_state = new_state;
 14e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <machine_state>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 152:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 154:	08 95       	ret

00000156 <__vector_16>:
/*
 * Timer0 overflow interrupt
 * interrupt flag cleared by hardware
 */
ISR(TIMER0_OVF_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
    button_mask <<= 1;
 162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 166:	88 0f       	add	r24, r24
 168:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (BUTTON_ON)
 16c:	4a 9b       	sbis	0x09, 2	; 9
 16e:	04 c0       	rjmp	.+8      	; 0x178 <__vector_16+0x22>
        button_mask |= 1;
 170:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 174:	81 60       	ori	r24, 0x01	; 1
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_16+0x28>
    else
        button_mask &= ~1;
 178:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    if (button_timer >= 0)
 182:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 186:	87 fd       	sbrc	r24, 7
 188:	05 c0       	rjmp	.+10     	; 0x194 <__vector_16+0x3e>
        button_timer++;
 18a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_timer>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    if (wakeup_timer >= 0)
 194:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 198:	87 fd       	sbrc	r24, 7
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <__vector_16+0x50>
        wakeup_timer++;
 19c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    if (idle_timer >= 0)
 1a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1aa:	87 fd       	sbrc	r24, 7
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_16+0x62>
        idle_timer++;
 1ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
#ifdef USE_LED
    TOGGLE_LED6;
 1b8:	29 9b       	sbis	0x05, 1	; 5
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_16+0x6a>
 1bc:	29 98       	cbi	0x05, 1	; 5
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_16+0x6c>
 1c0:	29 9a       	sbi	0x05, 1	; 5
#endif
}
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_1>:
/*
 * INT0 interrupt
 * interrupt flag cleared by hardware
 */
ISR(INT0_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
    int0_event = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <int0_event>
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <sensor_init>:

void
sensor_init(void)
{
    // PORTC setup PINS for input
    DDRC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 1ec:	87 b1       	in	r24, 0x07	; 7
 1ee:	80 7c       	andi	r24, 0xC0	; 192
 1f0:	87 b9       	out	0x07, r24	; 7

    // turn off analog comparator
    ACSR |= _BV(ACD);
 1f2:	80 b7       	in	r24, 0x30	; 48
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	80 bf       	out	0x30, r24	; 48
    
    // start the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 1f8:	8b e8       	ldi	r24, 0x8B	; 139
 1fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    // at start, no channels are in use
    current_channel = -1;       /* channel currently measured */
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
 20a:	08 95       	ret

0000020c <sensor_pre_power_down>:

void
sensor_pre_power_down(void)
{
    // turn off adc
    ADCSRA = 0;
 20c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

    // shutdown modules
    PRR |= _BV(PRADC);
 210:	e4 e6       	ldi	r30, 0x64	; 100
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 83       	st	Z, r24

    // turn on pull ups on adc ports
    PORTC |= (_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 21a:	88 b1       	in	r24, 0x08	; 8
 21c:	8f 63       	ori	r24, 0x3F	; 63
 21e:	88 b9       	out	0x08, r24	; 8
 220:	08 95       	ret

00000222 <sensor_post_power_down>:

void
sensor_post_power_down(void)
{
    // startup adc
    PRR &= ~(_BV(PRADC));
 222:	e4 e6       	ldi	r30, 0x64	; 100
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	80 83       	st	Z, r24
    // initialize the ADC, and enable interrupt, scale clock by 8
    ADCSRA = _BV(ADEN)|_BV(ADIE)|_BV(ADPS1)|_BV(ADPS0);
 22c:	8b e8       	ldi	r24, 0x8B	; 139
 22e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    current_channel = -1;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 23a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    
    // turn off pull ups on ADC ports
    PORTC &= ~(_BV(PC0)|_BV(PC1)|_BV(PC2)|_BV(PC3)|_BV(PC4)|_BV(PC5));
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 7c       	andi	r24, 0xC0	; 192
 242:	88 b9       	out	0x08, r24	; 8
 244:	08 95       	ret

00000246 <sensor_state_machine>:
void
sensor_state_machine(void)
{
    // if we now have a set of channels to look at,
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
 246:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_channels>
    if (curchannels > 0 && current_channel < 0)
 24a:	88 23       	and	r24, r24
 24c:	41 f1       	breq	.+80     	; 0x29e <sensor_state_machine+0x58>
 24e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 252:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <current_channel+0x1>
 256:	37 ff       	sbrs	r19, 7
 258:	22 c0       	rjmp	.+68     	; 0x29e <sensor_state_machine+0x58>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
        {
            if (curchannels & (1<<i))
 25e:	48 2f       	mov	r20, r24
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	ba 01       	movw	r22, r20
 264:	02 2e       	mov	r0, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <sensor_state_machine+0x26>
 268:	75 95       	asr	r23
 26a:	67 95       	ror	r22
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <sensor_state_machine+0x22>
 270:	60 ff       	sbrs	r22, 0
 272:	07 c0       	rjmp	.+14     	; 0x282 <sensor_state_machine+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 274:	f8 94       	cli
            {
                ATOMIC_BLOCK(ATOMIC_FORCEON) {
                    current_channel = i;
 276:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <current_channel>
 27a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <current_channel+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 27e:	78 94       	sei
                }
                break;
 280:	05 c0       	rjmp	.+10     	; 0x28c <sensor_state_machine+0x46>
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	3f 4f       	sbci	r19, 0xFF	; 255
    // set the current_channel and initiate measurement
    uint8_t curchannels = adc_channels;
    if (curchannels > 0 && current_channel < 0)
    {
        // find the first channel
        for (uint8_t i=0; i<MAX_ADC_PINS; i++)
 286:	26 30       	cpi	r18, 0x06	; 6
 288:	31 05       	cpc	r19, r1
 28a:	59 f7       	brne	.-42     	; 0x262 <sensor_state_machine+0x1c>
                    current_channel = i;
                }
                break;
            }
        }
        ADMUX = current_channel;
 28c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_channel>
 290:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

        // start a new conversion
        ADCSRA |= _BV(ADSC);
 294:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 298:	90 64       	ori	r25, 0x40	; 64
 29a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 29e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <adc_complete_event>
 2a2:	99 23       	and	r25, r25
 2a4:	d1 f1       	breq	.+116    	; 0x31a <sensor_state_machine+0xd4>
    {
        // if no channels are requested, then finish
        if (curchannels == 0) {
 2a6:	81 11       	cpse	r24, r1
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <sensor_state_machine+0x76>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2aa:	f8 94       	cli
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                current_channel = -1;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_channel+0x1>
 2b4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2b8:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 2ba:	2c c0       	rjmp	.+88     	; 0x314 <sensor_state_machine+0xce>
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
 2bc:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <current_channel>
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
        find_channel:
            while (i < MAX_ADC_PINS)
            {
                if (curchannels & (1<<i)) {
 2c2:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else {
            // get the next channel
            uint8_t i = current_channel + 1;
        find_channel:
            while (i < MAX_ADC_PINS)
 2c4:	26 30       	cpi	r18, 0x06	; 6
 2c6:	20 f5       	brcc	.+72     	; 0x310 <sensor_state_machine+0xca>
            {
                if (curchannels & (1<<i)) {
 2c8:	42 2f       	mov	r20, r18
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	bc 01       	movw	r22, r24
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <sensor_state_machine+0x90>
 2d2:	75 95       	asr	r23
 2d4:	67 95       	ror	r22
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <sensor_state_machine+0x8c>
 2da:	60 ff       	sbrs	r22, 0
 2dc:	10 c0       	rjmp	.+32     	; 0x2fe <sensor_state_machine+0xb8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2de:	f8 94       	cli
                    ATOMIC_BLOCK(ATOMIC_FORCEON) {
                        current_channel = i;
 2e0:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <current_channel+0x1>
 2e4:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <current_channel>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2e8:	78 94       	sei
            if (i >= MAX_ADC_PINS) {
                i = 0;
                goto find_channel;
            }
            // start new conversion
            ADMUX = current_channel;
 2ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_channel>
 2ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
            ADCSRA |= _BV(ADSC);
 2f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2fc:	0b c0       	rjmp	.+22     	; 0x314 <sensor_state_machine+0xce>
                        current_channel = i;
                    }
                    break;
                } else
                    // zero out channels not used
                    adc_values[i] = 0;
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	fa 01       	movw	r30, r20
 304:	e1 5f       	subi	r30, 0xF1	; 241
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	11 82       	std	Z+1, r1	; 0x01
 30a:	10 82       	st	Z, r1
                ++i;
 30c:	2f 5f       	subi	r18, 0xFF	; 255
 30e:	da cf       	rjmp	.-76     	; 0x2c4 <sensor_state_machine+0x7e>
            }
            // roll back to 0 if needed
            if (i >= MAX_ADC_PINS) {
                i = 0;
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	da cf       	rjmp	.-76     	; 0x2c8 <sensor_state_machine+0x82>
            }
            // start new conversion
            ADMUX = current_channel;
            ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
 314:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <adc_complete_event>
 318:	08 95       	ret
 31a:	ef e0       	ldi	r30, 0x0F	; 15
 31c:	f1 e0       	ldi	r31, 0x01	; 1
        // start a new conversion
        ADCSRA |= _BV(ADSC);
    }

    // adc measurement finished, get the next channel
    if (adc_complete_event)
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
            if ((curchannels & (1 << i)) != (1 << i))
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ab 01       	movw	r20, r22
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <sensor_state_machine+0xec>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <sensor_state_machine+0xe8>
 336:	dc 01       	movw	r26, r24
 338:	a4 23       	and	r26, r20
 33a:	b5 23       	and	r27, r21
 33c:	4a 17       	cp	r20, r26
 33e:	5b 07       	cpc	r21, r27
 340:	11 f0       	breq	.+4      	; 0x346 <sensor_state_machine+0x100>
                adc_values[i] = 0;
 342:	11 82       	std	Z+1, r1	; 0x01
 344:	10 82       	st	Z, r1
            ADCSRA |= _BV(ADSC);
        }
        adc_complete_event = 0;
    } else {
        // zero out channels not used
        for (int i=0; i<MAX_ADC_PINS; i++)
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	32 96       	adiw	r30, 0x02	; 2
 34c:	26 30       	cpi	r18, 0x06	; 6
 34e:	31 05       	cpc	r19, r1
 350:	59 f7       	brne	.-42     	; 0x328 <sensor_state_machine+0xe2>
 352:	08 95       	ret

00000354 <__vector_21>:
/*
 * ADC complete interrupt
 * interrupt flag cleared by hardware
 */
ISR(ADC_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
    uint8_t low, high;
    low = ADCL;
 368:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    high = ADCH;
 36c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    adc_values[current_channel] = (high << 8) | low;
 370:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current_channel>
 374:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <current_channel+0x1>
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e1 5f       	subi	r30, 0xF1	; 241
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	92 2b       	or	r25, r18
 384:	91 83       	std	Z+1, r25	; 0x01
 386:	80 83       	st	Z, r24
    adc_complete_event = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_complete_event>
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <spi_init>:
void
spi_init(void)
{
    // setup PINS for input, RESET is already set as input and pull up on
    // due to fuse setting
    SPI_DIR &= ~(_BV(MOSI)|_BV(SCK)|_BV(CS));
 3a2:	84 b1       	in	r24, 0x04	; 4
 3a4:	83 7d       	andi	r24, 0xD3	; 211
 3a6:	84 b9       	out	0x04, r24	; 4

    // set pullups on input pins
    SPI_PORT |= (_BV(MOSI)|_BV(SCK)|_BV(CS));
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	8c 62       	ori	r24, 0x2C	; 44
 3ac:	85 b9       	out	0x05, r24	; 5

    // PORTB setup PINS for output
    SPI_DIR |= _BV(MISO);
 3ae:	24 9a       	sbi	0x04, 4	; 4

    // EEPROM to input, no pullup
    EEPROM_DIR &= ~_BV(EEPROM);
 3b0:	27 98       	cbi	0x04, 7	; 4
    
    // enabled SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	8c bd       	out	0x2c, r24	; 44
 3b6:	08 95       	ret

000003b8 <spi_pre_power_down>:

void
spi_pre_power_down(void)
{
    // shutdown modules
    PRR |= _BV(PRSPI);
 3b8:	e4 e6       	ldi	r30, 0x64	; 100
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	84 60       	ori	r24, 0x04	; 4
 3c0:	80 83       	st	Z, r24

    // MISO to input, pull-up on
    SPI_DIR &= ~(_BV(MISO));
 3c2:	24 98       	cbi	0x04, 4	; 4
    SPI_PORT |= _BV(MISO);
 3c4:	2c 9a       	sbi	0x05, 4	; 5
 3c6:	08 95       	ret

000003c8 <spi_post_power_down>:

void
spi_post_power_down(void)
{
    // MISO to output, pull-up off
    SPI_PORT &= ~(_BV(MISO));
 3c8:	2c 98       	cbi	0x05, 4	; 5
    SPI_DIR |= _BV(MISO);
 3ca:	24 9a       	sbi	0x04, 4	; 4

    // turn on SPI
    PRR &= ~(_BV(PRSPI));
 3cc:	e4 e6       	ldi	r30, 0x64	; 100
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	8b 7f       	andi	r24, 0xFB	; 251
 3d4:	80 83       	st	Z, r24
    // enable SPI, enable interrupt
    SPCR = _BV(SPE)|_BV(SPIE);
 3d6:	80 ec       	ldi	r24, 0xC0	; 192
 3d8:	8c bd       	out	0x2c, r24	; 44
 3da:	08 95       	ret

000003dc <spi_state_machine>:

void
spi_state_machine(void)
{
    // toggle eeprom if chosen
    if (toggle_eeprom)
 3dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <toggle_eeprom>
 3e0:	88 23       	and	r24, r24
 3e2:	51 f0       	breq	.+20     	; 0x3f8 <spi_state_machine+0x1c>
    {
        if (bit_is_clear(EEPROM_PIN, EEPROM))
 3e4:	1f 99       	sbic	0x03, 7	; 3
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <spi_state_machine+0x10>
        {
            // set to input
            EEPROM_DIR &= ~_BV(EEPROM);
 3e8:	27 98       	cbi	0x04, 7	; 4
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <spi_state_machine+0x18>
        } else {
            // set to output, set low
            EEPROM_DIR |= _BV(EEPROM);
 3ec:	27 9a       	sbi	0x04, 7	; 4
            EEPROM_PORT &= _BV(EEPROM);
 3ee:	85 b1       	in	r24, 0x05	; 5
 3f0:	80 78       	andi	r24, 0x80	; 128
 3f2:	85 b9       	out	0x05, r24	; 5
        }
        toggle_eeprom = 0;
 3f4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <toggle_eeprom>
    }
    // turn off interrupt flag
    spi_stc_event = 0;
 3f8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <spi_stc_event>
 3fc:	08 95       	ret

000003fe <__vector_17>:
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	ee b5       	in	r30, 0x2e	; 46
 412:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <spi_state.1658>
 416:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <spi_state.1658+0x1>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	91 05       	cpc	r25, r1
 41e:	89 f1       	breq	.+98     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	91 05       	cpc	r25, r1
 424:	f1 f1       	breq	.+124    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 426:	89 2b       	or	r24, r25
 428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	40 c0       	rjmp	.+128    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 42c:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <addr.1657>
 430:	80 ef       	ldi	r24, 0xF0	; 240
 432:	8e 0f       	add	r24, r30
 434:	86 30       	cpi	r24, 0x06	; 6
 436:	90 f4       	brcc	.+36     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	e1 51       	subi	r30, 0x11	; 17
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	80 81       	ld	r24, Z
 444:	8e bd       	out	0x2e, r24	; 46
 446:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <addr.1657>
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	e1 51       	subi	r30, 0x11	; 17
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	81 81       	ldd	r24, Z+1	; 0x01
 456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 45a:	10 c0       	rjmp	.+32     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45c:	e2 30       	cpi	r30, 0x02	; 2
 45e:	31 f4       	brne	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_channels>
 464:	8e bd       	out	0x2e, r24	; 46
 466:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 46c:	e3 30       	cpi	r30, 0x03	; 3
 46e:	31 f4       	brne	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 470:	1e bc       	out	0x2e, r1	; 46
 472:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <toggle_eeprom>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0b c0       	rjmp	.+22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 482:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 486:	8e bd       	out	0x2e, r24	; 46
 488:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <addr.1657>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	11 f4       	brne	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <adc_channels>
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <spi_state.1658+0x1>
 49c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <spi_state.1658>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a2:	1e bc       	out	0x2e, r1	; 46
 4a4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spi_state.1658+0x1>
 4a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <spi_state.1658>
 4ac:	28 9b       	sbis	0x05, 0	; 5
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	28 98       	cbi	0x05, 0	; 5
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	28 9a       	sbi	0x05, 0	; 5
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <spi_stc_event>
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <main>:
{
    // set the clock to 8MHz
//    CLKPR = _BV(CLKPCE);
//    CLKPR = 0;

    init();
 4ce:	0e 94 77 00 	call	0xee	; 0xee <init>
    
    machine_state = prev_state = Start;
 4d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <prev_state>
 4d6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <machine_state>
    button_mask = 0xFF;
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_mask>
    wakeup_timer = -1;
 4e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wakeup_timer>
    idle_timer = -1;
 4e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <idle_timer>
    button_timer = -1;
 4e8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_timer>
    WakeupEvent evt = Unknown;
    
	// start interrupts
	sei();
 4ec:	78 94       	sei
    machine_state = prev_state = Start;
    button_mask = 0xFF;
    wakeup_timer = -1;
    idle_timer = -1;
    button_timer = -1;
    WakeupEvent evt = Unknown;
 4ee:	d3 e0       	ldi	r29, 0x03	; 3
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
                idle_timer = -1;
 4f0:	cf ef       	ldi	r28, 0xFF	; 255

    // main loop
    while(1)
    {
/*--------------------------------------------------------*/
        switch (machine_state) {
 4f2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <machine_state>
 4f6:	8e 2f       	mov	r24, r30
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	81 31       	cpi	r24, 0x11	; 17
 4fc:	91 05       	cpc	r25, r1
 4fe:	08 f0       	brcs	.+2      	; 0x502 <main+0x34>
 500:	e4 c0       	rjmp	.+456    	; 0x6ca <main+0x1fc>
 502:	fc 01       	movw	r30, r24
 504:	ed 5b       	subi	r30, 0xBD	; 189
 506:	ff 4f       	sbci	r31, 0xFF	; 255
 508:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__tablejump2__>
            change_state(WaitEntry);
            break;
/*--------------------------------------------------------*/
        case WaitEntry:
#ifdef USE_LED
            LED1_SET_ON;
 50c:	2f 9a       	sbi	0x05, 7	; 5
            LED2_SET_OFF;
 50e:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 510:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 512:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 514:	5c 98       	cbi	0x0b, 4	; 11
            SHUTDOWN_SET_OFF;
 516:	2e 98       	cbi	0x05, 6	; 5
            change_state(Wait);
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	d8 c0       	rjmp	.+432    	; 0x6cc <main+0x1fe>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 51c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            ENABLE_SET_OFF;
            SHUTDOWN_SET_OFF;
            change_state(Wait);
            break;
        case Wait:
            if (button_pressed())
 520:	81 11       	cpse	r24, r1
 522:	03 c0       	rjmp	.+6      	; 0x52a <main+0x5c>
                change_state(ButtonPress);
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
// trigger when the wake up period is over
inline
int wake_up_expired(void)
{
    // this is 750ms
    if (wakeup_timer >= (uint8_t)(F_CPU/256/256/1.5))
 52a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wakeup_timer>
 52e:	81 35       	cpi	r24, 0x51	; 81
 530:	0c f0       	brlt	.+2      	; 0x534 <main+0x66>
 532:	d5 c0       	rjmp	.+426    	; 0x6de <main+0x210>
 534:	cd c0       	rjmp	.+410    	; 0x6d0 <main+0x202>
            if (wake_up_expired())
                change_state(MCUOffEntry);
            break;
/*--------------------------------------------------------*/
        case ButtonPress:
            button_timer = 0;
 536:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <button_timer>
            change_state(ButtonRelease);
 53a:	84 e0       	ldi	r24, 0x04	; 4
 53c:	c7 c0       	rjmp	.+398    	; 0x6cc <main+0x1fe>
/*--------------------------------------------------------*/
// trigger when button released
inline
int button_released(void)
{
    return button_mask == 0xFF;
 53e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
        case ButtonPress:
            button_timer = 0;
            change_state(ButtonRelease);
            break;
        case ButtonRelease:
            if (button_released()) {
 542:	8f 3f       	cpi	r24, 0xFF	; 255
 544:	09 f0       	breq	.+2      	; 0x548 <main+0x7a>
 546:	c4 c0       	rjmp	.+392    	; 0x6d0 <main+0x202>
                // is delay long enough, wait 200ms
                if (button_timer >= (F_CPU/256/256/5)) {
 548:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <button_timer>
 54c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <prev_state>
 550:	98 31       	cpi	r25, 0x18	; 24
 552:	60 f0       	brcs	.+24     	; 0x56c <main+0x9e>
                    if (prev_state == Wait)
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	11 f4       	brne	.+4      	; 0x55c <main+0x8e>
                        change_state(SignaledOnEntry);
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	11 c0       	rjmp	.+34     	; 0x57e <main+0xb0>
                    else if (prev_state == SignaledOn)
 55c:	86 30       	cpi	r24, 0x06	; 6
 55e:	11 f4       	brne	.+4      	; 0x564 <main+0x96>
                        change_state(MCUOffEntry);
 560:	8d e0       	ldi	r24, 0x0D	; 13
 562:	0d c0       	rjmp	.+26     	; 0x57e <main+0xb0>
                    else if (prev_state == MCURunning)
 564:	88 30       	cpi	r24, 0x08	; 8
 566:	69 f4       	brne	.+26     	; 0x582 <main+0xb4>
                        change_state(SignaledOffEntry);
 568:	8b e0       	ldi	r24, 0x0B	; 11
 56a:	09 c0       	rjmp	.+18     	; 0x57e <main+0xb0>
                } else {
                    // delay too short
                    if (prev_state == Wait)
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	11 f4       	brne	.+4      	; 0x574 <main+0xa6>
                        change_state(WaitEntry);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	05 c0       	rjmp	.+10     	; 0x57e <main+0xb0>
                    else if (prev_state == SignaledOn)
 574:	86 30       	cpi	r24, 0x06	; 6
 576:	81 f3       	breq	.-32     	; 0x558 <main+0x8a>
                        change_state(SignaledOnEntry);
                    else if (prev_state == MCURunning)
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	19 f4       	brne	.+6      	; 0x582 <main+0xb4>
                        change_state(MCURunningEntry);
 57c:	87 e0       	ldi	r24, 0x07	; 7
 57e:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                }
                button_timer = -1;
 582:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <button_timer>
 586:	a4 c0       	rjmp	.+328    	; 0x6d0 <main+0x202>
            }
            break;
/*--------------------------------------------------------*/
        case SignaledOnEntry:
#ifdef USE_LED
            LED2_SET_ON;
 588:	5d 9a       	sbi	0x0b, 5	; 11
            LED1_SET_OFF;
 58a:	2f 98       	cbi	0x05, 7	; 5
            LED3_SET_OFF;
 58c:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 58e:	5f 98       	cbi	0x0b, 7	; 11
#endif
            wakeup_timer = -1;
 590:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <wakeup_timer>
            ENABLE_SET_ON;
 594:	5c 9a       	sbi	0x0b, 4	; 11
            change_state(SignaledOn);
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	99 c0       	rjmp	.+306    	; 0x6cc <main+0x1fe>
            break;
        case SignaledOn:
            if (mcu_is_running())
 59a:	4b 9b       	sbis	0x09, 3	; 9
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <main+0xd6>
                change_state(MCURunningEntry);
 59e:	87 e0       	ldi	r24, 0x07	; 7
 5a0:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 5a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
            change_state(SignaledOn);
            break;
        case SignaledOn:
            if (mcu_is_running())
                change_state(MCURunningEntry);
            if (button_pressed())
 5a8:	81 11       	cpse	r24, r1
 5aa:	92 c0       	rjmp	.+292    	; 0x6d0 <main+0x202>
                change_state(ButtonPress);
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	8e c0       	rjmp	.+284    	; 0x6cc <main+0x1fe>
            break;
/*--------------------------------------------------------*/
        case MCURunningEntry:
#ifdef USE_LED
            LED3_SET_ON;
 5b0:	5e 9a       	sbi	0x0b, 6	; 11
            LED1_SET_OFF;
 5b2:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 5b4:	5d 98       	cbi	0x0b, 5	; 11
            LED4_SET_OFF;
 5b6:	5f 98       	cbi	0x0b, 7	; 11
#endif
            idle_timer = 0;
 5b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <idle_timer>
            change_state(MCURunning);
 5bc:	88 e0       	ldi	r24, 0x08	; 8
 5be:	86 c0       	rjmp	.+268    	; 0x6cc <main+0x1fe>
/*--------------------------------------------------------*/
// trigger when button pressed
inline
int button_pressed(void)
{
    return button_mask == 0x00;
 5c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_mask>
#endif
            idle_timer = 0;
            change_state(MCURunning);
            break;
        case MCURunning:
            if (button_pressed())
 5c4:	81 11       	cpse	r24, r1
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <main+0x104>
            {
                change_state(ButtonPress);
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 5ce:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
            }
            // if turned off via the desktop
            if (!mcu_is_running())
 5d2:	4b 99       	sbic	0x09, 3	; 9
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <main+0x112>
            {
                change_state(MCUOffEntry);
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 5dc:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
// trigger when the idle period is over
inline
int idle_expired(void)
{
    // this is 375ms
    if (idle_timer >= (uint8_t)(F_CPU/256/256/3))
 5e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <idle_timer>
 5e4:	88 32       	cpi	r24, 0x28	; 40
 5e6:	0c f0       	brlt	.+2      	; 0x5ea <main+0x11c>
 5e8:	7c c0       	rjmp	.+248    	; 0x6e2 <main+0x214>
 5ea:	72 c0       	rjmp	.+228    	; 0x6d0 <main+0x202>
            }
            break;
/*--------------------------------------------------------*/
        case IdleEntry:
#ifdef USE_LED
            LED1_SET_OFF;
 5ec:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 5ee:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 5f0:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 5f2:	5f 98       	cbi	0x0b, 7	; 11
#endif
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 5f4:	e8 9a       	sbi	0x1d, 0	; 29
            // enter Idle mode
            set_sleep_mode(SLEEP_MODE_IDLE);
 5f6:	83 b7       	in	r24, 0x33	; 51
 5f8:	81 7f       	andi	r24, 0xF1	; 241
 5fa:	83 bf       	out	0x33, r24	; 51
            sleep_enable();
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	83 bf       	out	0x33, r24	; 51
            sleep_mode();
 602:	83 b7       	in	r24, 0x33	; 51
 604:	81 60       	ori	r24, 0x01	; 1
 606:	83 bf       	out	0x33, r24	; 51
 608:	88 95       	sleep
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	8e 7f       	andi	r24, 0xFE	; 254
 60e:	83 bf       	out	0x33, r24	; 51
// as these are in priority order, if a higher priority
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
 610:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 614:	81 11       	cpse	r24, r1
 616:	0a c0       	rjmp	.+20     	; 0x62c <main+0x15e>
        return ButtonEvt;
    if (spi_stc_event)
 618:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <spi_stc_event>
 61c:	81 11       	cpse	r24, r1
 61e:	08 c0       	rjmp	.+16     	; 0x630 <main+0x162>
        return SPItxfer;
    if (adc_complete_event)
 620:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_complete_event>
 624:	81 11       	cpse	r24, r1
 626:	06 c0       	rjmp	.+12     	; 0x634 <main+0x166>
        return ADCcomplete;
    return Unknown;
 628:	d3 e0       	ldi	r29, 0x03	; 3
 62a:	05 c0       	rjmp	.+10     	; 0x636 <main+0x168>
// happens, then it will get chosen
inline
WakeupEvent get_wakeup_event(void)
{
    if (int0_event)
        return ButtonEvt;
 62c:	d0 e0       	ldi	r29, 0x00	; 0
 62e:	03 c0       	rjmp	.+6      	; 0x636 <main+0x168>
    if (spi_stc_event)
        return SPItxfer;
 630:	d1 e0       	ldi	r29, 0x01	; 1
 632:	01 c0       	rjmp	.+2      	; 0x636 <main+0x168>
    if (adc_complete_event)
        return ADCcomplete;
 634:	d2 e0       	ldi	r29, 0x02	; 2
            set_sleep_mode(SLEEP_MODE_IDLE);
            sleep_enable();
            sleep_mode();
            // get wakeup source
            evt = get_wakeup_event();
            change_state(IdleExit);
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	49 c0       	rjmp	.+146    	; 0x6cc <main+0x1fe>
            break;
        case IdleExit:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 63a:	e8 98       	cbi	0x1d, 0	; 29
            if (evt == ButtonEvt || !mcu_is_running())
 63c:	dd 23       	and	r29, r29
 63e:	11 f0       	breq	.+4      	; 0x644 <main+0x176>
 640:	4b 99       	sbic	0x09, 3	; 9
 642:	02 c0       	rjmp	.+4      	; 0x648 <main+0x17a>
                change_state(MCURunningEntry);
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	42 c0       	rjmp	.+132    	; 0x6cc <main+0x1fe>
            else
                change_state(IdleEntry);
 648:	89 e0       	ldi	r24, 0x09	; 9
 64a:	40 c0       	rjmp	.+128    	; 0x6cc <main+0x1fe>
            break;
/*--------------------------------------------------------*/
        case SignaledOffEntry:
#ifdef USE_LED
            LED4_SET_ON;
 64c:	5f 9a       	sbi	0x0b, 7	; 11
            LED1_SET_OFF;
 64e:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 650:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 652:	5e 98       	cbi	0x0b, 6	; 11
#endif
            SHUTDOWN_SET_ON;
 654:	2e 9a       	sbi	0x05, 6	; 5
            change_state(SignaledOff);
 656:	8c e0       	ldi	r24, 0x0C	; 12
 658:	39 c0       	rjmp	.+114    	; 0x6cc <main+0x1fe>
            break;
        case SignaledOff:
            if (!mcu_is_running())
 65a:	4b 99       	sbic	0x09, 3	; 9
 65c:	39 c0       	rjmp	.+114    	; 0x6d0 <main+0x202>
            {
                SHUTDOWN_SET_OFF;
 65e:	2e 98       	cbi	0x05, 6	; 5
 660:	3e c0       	rjmp	.+124    	; 0x6de <main+0x210>
            }
            break;
/*--------------------------------------------------------*/
        case MCUOffEntry: case MCUOff:
#ifdef USE_LED
            LED1_SET_OFF;
 662:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 664:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 666:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 668:	5f 98       	cbi	0x0b, 7	; 11
#endif
            ENABLE_SET_OFF;
 66a:	5c 98       	cbi	0x0b, 4	; 11
            change_state(PowerDownEntry);
 66c:	8f e0       	ldi	r24, 0x0F	; 15
 66e:	2e c0       	rjmp	.+92     	; 0x6cc <main+0x1fe>
            break;
/*--------------------------------------------------------*/
        case PowerDownEntry:
#ifdef USE_LED
            LED1_SET_OFF;
 670:	2f 98       	cbi	0x05, 7	; 5
            LED2_SET_OFF;
 672:	5d 98       	cbi	0x0b, 5	; 11
            LED3_SET_OFF;
 674:	5e 98       	cbi	0x0b, 6	; 11
            LED4_SET_OFF;
 676:	5f 98       	cbi	0x0b, 7	; 11
            LED5_SET_OFF;
 678:	28 98       	cbi	0x05, 0	; 5
            LED6_SET_OFF;
 67a:	29 98       	cbi	0x05, 1	; 5
#endif
            // enter Power-Down mode
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	81 7f       	andi	r24, 0xF1	; 241
 680:	84 60       	ori	r24, 0x04	; 4
 682:	83 bf       	out	0x33, r24	; 51

            // SHUTDOWN pin to input and pull-up on
            SHUTDOWN_DIR &= ~(_BV(SHUTDOWN));
 684:	26 98       	cbi	0x04, 6	; 4
            SHUTDOWN_PORT |= _BV(SHUTDOWN);
 686:	2e 9a       	sbi	0x05, 6	; 5

            // modules power off
            sensor_pre_power_down();
 688:	0e 94 06 01 	call	0x20c	; 0x20c <sensor_pre_power_down>
            spi_pre_power_down();
 68c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <spi_pre_power_down>
            
            // set INTO interrupt
            EIMSK |= _BV(INT0);
 690:	e8 9a       	sbi	0x1d, 0	; 29

            // do the power down, if no INT0 interrupt
            cli();
 692:	f8 94       	cli
            if (!int0_event) {
 694:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <int0_event>
 698:	81 11       	cpse	r24, r1
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <main+0x1de>
                sleep_enable();
 69c:	83 b7       	in	r24, 0x33	; 51
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	83 bf       	out	0x33, r24	; 51
                sei();
 6a2:	78 94       	sei
                sleep_cpu();
 6a4:	88 95       	sleep
                sleep_disable();
 6a6:	83 b7       	in	r24, 0x33	; 51
 6a8:	8e 7f       	andi	r24, 0xFE	; 254
 6aa:	83 bf       	out	0x33, r24	; 51
            }
            sei();
 6ac:	78 94       	sei
            change_state(PowerDownExit);
 6ae:	80 e1       	ldi	r24, 0x10	; 16
 6b0:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
            // NO BREAK, fall through to PowerDownExit
/*--------------------------------------------------------*/
        case PowerDownExit:
            // turn off INT0 interrupt
            EIMSK &= ~(_BV(INT0));
 6b4:	e8 98       	cbi	0x1d, 0	; 29
            
            spi_post_power_down();
 6b6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <spi_post_power_down>
            sensor_post_power_down();
 6ba:	0e 94 11 01 	call	0x222	; 0x222 <sensor_post_power_down>
            // SHUTDOWN pin pull up off, to output
            SHUTDOWN_PORT &= ~(_BV(SHUTDOWN));
 6be:	2e 98       	cbi	0x05, 6	; 5
            SHUTDOWN_DIR |= _BV(SHUTDOWN);
 6c0:	26 9a       	sbi	0x04, 6	; 4
            wakeup_timer = 0;
 6c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wakeup_timer>
            change_state(WaitEntry);
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <main+0x1fe>
            break;
/*--------------------------------------------------------*/
        default:
            change_state(Start);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
        }
/*--------------------------------------------------------*/
        spi_state_machine();
 6d0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <spi_state_machine>
        sensor_state_machine();
 6d4:	0e 94 23 01 	call	0x246	; 0x246 <sensor_state_machine>

        int0_event = 0;
 6d8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <int0_event>
    }
 6dc:	0a cf       	rjmp	.-492    	; 0x4f2 <main+0x24>
            break;
        case Wait:
            if (button_pressed())
                change_state(ButtonPress);
            if (wake_up_expired())
                change_state(MCUOffEntry);
 6de:	8d e0       	ldi	r24, 0x0D	; 13
 6e0:	f5 cf       	rjmp	.-22     	; 0x6cc <main+0x1fe>
                change_state(MCUOffEntry);
                idle_timer = -1;
            }
            if (idle_expired())
            {
                change_state(IdleEntry);
 6e2:	89 e0       	ldi	r24, 0x09	; 9
 6e4:	0e 94 97 00 	call	0x12e	; 0x12e <change_state>
                idle_timer = -1;
 6e8:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <idle_timer>
 6ec:	f1 cf       	rjmp	.-30     	; 0x6d0 <main+0x202>

000006ee <__tablejump2__>:
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	05 90       	lpm	r0, Z+
 6f4:	f4 91       	lpm	r31, Z
 6f6:	e0 2d       	mov	r30, r0
 6f8:	09 94       	ijmp

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
